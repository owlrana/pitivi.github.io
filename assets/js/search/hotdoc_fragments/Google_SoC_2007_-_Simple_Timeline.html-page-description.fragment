fragment_downloaded_cb({"url":"Google_SoC_2007_-_Simple_Timeline.html#page-description","fragment":"This branch of PiTiVi has been superceded by PiTiVi 0.11, which\nincorporates many of these changes. This page is left as a record of\nmy participation in Summer of Code.\nOur goal for this summer is to finish the Simple Timeline. I started by\nadding some of the features presented in the Simple UI\nMockups illustrations. I am now turning\nmy attention to file load and save support, even though not all of the\nsimple UI has been implemented. File Load/Save is now high priority. In\naddition, I have been creating Design Docs for\nmyself, and for other people who wish to contribute.\nDuring the development of PiTiVi this summer, we have discovered a\nnumber of gstreamer and gnonlin bugs. This means that the pitivi-soc\nbranch depends on GStreamer >= 10.9 . If you are interested in\ntrying out PiTiVi, or hacking it, you will need to follow the directions\non the Gstreamer Setup Page to configure your environment.\nImage:SimpleSourceWidget.png|improved source widget\nImage:SimpleEditingWidget.png|new editing widget\nImage:Editing_widget_in_action.png|functional editing widget in\naction Image:Editing widget in action 08-07-07.png|editing slider now\nfeatures horizontal bar indicating start and stop positions Image:Simple\ntimeline 08-07-07.png|timeline has been cosmetically tweaked\nImage:Source_navigation_widget.png|mockup of editing slider\nAll work is first being done in the PITIVI_SOC_2007 branch before\nbeing merged in trunk.\nWebSVN : http://svn.gnome.org/viewcvs/pitivi/branches/PITIVI_SOC_2007/\nAnonymous checkout :\nsvn cosvn://svn.gnome.org/svn/pitivi/branches/PITIVI_SOC_2007/pitivi-soc\nThe coding period for SoC has ended. I did do a rather large commit, but\nthis has left the SoC branch in a somewhat messy state, as most of the\ncode is completely untested. I would like to continue working on this,\nbut for the next two days I will be occupied with school and family\nissues. Thursday and friday are out, because my car needs attention\n(water pump leak), and instruction begins on the 27th. So it's not\nlooking good for the short term.\nOn the whole, I feel pleased with my earlier work, but I am a bit\ndisappointed at the lack of progress during the later half of the\nsummer. Stay tuned for future developments. I think this was a great\nexperience, and I feel that I have learned a great deal from\nparticipating in Summer of Code.\nI tried to make a go at the UI, but it got hairy really fast. I was\nafraid to commit unfinished code, but I ended up waiting too long. I\nchanged a bunch of internal stuff, so I gave up on trying to commit\nthat. I'm working now on the backend, after having had a chance to\ndiscuss the architecture a bit with Edward. In between, I had to study\nfor a final exam for a class in which I took an incomplete.\nFinished writing the core application logic for file load and save, as\nwell as all the test cases. I spent most of the making the application\nlogic actually pass the test cases =P. I'm debating between\nshifting focus towards the UI or towards file parsing/output. File\noutput would be the easiest to implement, UI the next easiest, with file\nparsing being the most difficult. But, I could start working on the UI\nright away, whereas I will need to converse with Edward before beginning\nwork on the file format itself.\nEdward, if you're able to read this, let me know what you think.\nI've gotten a bit bogged down in design work, and I've decided to just\nstart coding what I have. I have a feeling the rest will become clear\nonce I start making progress. I'm hoping to have the application logic\nfinished by the end of the week, and the UI going by the start of next\nweek. This has taken far too long, and I really need to get cracking at\nimplementing the file format (which is the hard/interesting part).\nI've been working on the design documents, and creating file/load save\ntest cases. My goal is to have the application logic for file load/save\ncommitted to the SoC branch some time next week. I've been focusing\nmostly on design at the moment. Today I spent some time splitting up the\ndesign docs page into separate elements. I also am having to compile\nGStreamer from CVS to catch up to the latest gstreamer bug fixes.\nBegan thinking about the issue of file load/save support. I started by\nexamining the patch supplied by Richard Boulton almost a year ago, which\nimplemented the complete application logic for handling saving and\nloading of projects. The patch does not, however, implement reading and\nwriting of the project file itself. The patch no longer cleanly applies,\nso I did my best to apply it manually. I then created a new patch, which\nI've uploaded to bugzilla. It's still only a partial patch, and it\nbreaks parts of the UI. My goal for the next day or so is to extract the\nbest parts of his design, and then implement my own solution. I'll\nprobably use some of his code in the system, but will definitely be\nre-implementing the UI.\nPart of the work on implementing file load/save support is creating a\ndesign document. Edward suggested that I put all my Design\nDocs up on the Wiki.\nPosted a mockup of the editing slider widget.\nI've been at GUADEC all week, and I've used some of that time to hack on\nPiTiVi. With edward's help, the volume slider on the source widget\nactually changes the volume for the clip. Today I committed a new\nrevision to the SoC branch which adds a cancel button to the editing\nwidget. This required some internal changes to the editing widget, but\nnothing too serious. Meanwhile, Edward is working on making the advanced\nUI more functional. He's got partial support for moving clips in the\nadvanced timeline, but has run afoul of some gstreamer bugs.\nI'm considering replacing the slider with a gtk.ScaleButton, since that\nwould allow the source widget to shrink down even more while allowing\nthe slider to grow to a more manageable size. I'm also thinking about a\ncustom widget for seeking that would eventually replace the simple\ngtk.HScales we've been using. It feature a much slimmer cursor, would\nsupport zooming, display a timescale, provide fancy navigation input\nsuch as jog/shuttle, and would directly show the media start/stop\npoints. I'm currently trying to design things on paper, but maybe i'll\npost a vector drawing to the wiki for comments.\nProject load/save support is in the early stages of design now. We are\nhoping to have this finished by the end of the summer, but it is a major\nchunk of work. Several contributors have begun submitting patches to\nhelp make this task easier. Edward is also beginning to explain to me\nthe intricacies of the effects/transition system in pitivi.\nToday I split out the editing slider code into a new class / file. While\nI was at it I created a helper widget to display the start and end\npoints of each clip above the slider. I also made it so that the start\nand stop trim buttons gray out when you drag the slider past the start\nor stop of the clip. This prevents you from setting the end before the\nstart, or vice versa. Meanwhile, Edward Hervey has tracked down the\nsource of a bug that caused PiTiVi to crash when dragging new sources\ninto the timeline.\nToday I made great progress. I did a number of cosmetic tweaks to get\nthe size of the SimpleSourceWidgets down (which in turn shrinks the\ntimeline itself). I also changed the way the those widgets are packed so\nthat resizing them does more to increase the size of the thumbnail\nimage. I also made it so that the thumbnail in each SimpleSourceWidget\nis updated when it's source's start point changes.\nI've decided to start leaving messages on a weekly basis, so that\nthere's a visible history of progress. Finally fixed thumbnail aspect\nratio scaling issues, as well as tracking down a bug that was preventing\nthem from updating.\nThe two components I have been focusing on are the SimpleSourceWidget\nand the SimpleEditingWidget. The SimpleSourceWidget and SimpleEditing\nwidgets are almost fully functional. I am now working on cleaning up\ncertain aspects of the editing widget, and perfecting the slider code.\nIn the course of creating a generic way of extracting thumbnails, we\nhave uncoverd a host of gstreamer bugs which make editing impractical\nfor files supported by certain gstreamer plugins, an area which is\noutside of my domain.\n"});