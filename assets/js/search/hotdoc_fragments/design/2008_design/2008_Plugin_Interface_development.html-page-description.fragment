fragment_downloaded_cb({"url": "design/2008_design/2008_Plugin_Interface_development.html#page-description", "fragment": "Pitivi s current interface whist having a solid base is a little lackluster with regards to API compatibility and formality I Gord August BST am currently developing a branch that aims to counter that. \nCurrent development is happening on a launchpad branch simply for ease of development for me located here https code.edge.launchpad.net gordallott junk pitivi plugininterface pitivi plugininterface \nA plugin needs to communicate in two ways the main application needs to be able to talk to plugin code call methods and such and plugin code needs to be able to communicate back via some sort of API currently pitivi handles the first problem with zope interfaces which works nicely the second problem is ignored plugins must query pitivi s internal code via pitivi.instance.PiTiVi which contains the programs instance. \nThe problem with this direction is that any internal code changes will break plugin compatibility and further more it increases the difficulty of the casual user writing plugins as they are required to be intimately knowledgeable of pitivi s internal code. \nThe tried and tested solution to this problem is to develop a plugin API the API will handle any communication from the plugin to pitivi by abstracting pitivi.instance.PiTiVi with a stable API. The plugin can then make simple calls such as api.gui.add_menu_item and be confident that the API will not change from version to version. \nThe api has a slight problem in that it may be initialised before pitivi is ready to be modified This is solved at the moment by locking the api via decorators for ease of use.. until the main pitivi codebase emits a ready signal the api will raise an InterfaceNotReadyError exception if its called before then \nThe current API uses epydoc for its documentation and is structured as follows \nThe current api simply requires that plugin.settings exists and un pickles that data to save load settings there is a problem there with human readabity and maybe even security also its not that kind to version upgrades. \nThe current implementation is inspired by Django s model setup essentially the plugin authors create a class in that class are Fields special pitivi python objects that can handle validation and such that describe settings. \nfor example the Field for a setting that must be a single line string would be \nAt the moment plugin.settings must be a pitivi.pluginsettings.SettingsStore object this object can then create xml data to store and retrieve the settings as needed. \na further example for the entire settings store is \nThis is a list of the current fields available \nThe current api only makes one consideration regarding configuration that is that the plugin class object must be IConfigurable zope interface compatible which essentially means must provide the configure method this requires plugins to create their own configuration dialogs and such which is a pain for plugin developers and a pain for anyone that likes consistency in their applications To solve this I am proposing an interface that will be able to take settings defined by a plugin and turn that into a sensible gtk configuration dialog. \nThe current implimentation is a mix in object that replaces the configure method with our own gui builder code plugin authors that need more flexibility can create their own configure method \nthe gui builder code simply parses the current settings object and is able to build a gui from the fields provided for example it will provide a text entry for CharField objects. what widget is used to draw each settings can be further customised by providing the setting with a widget argument for example \nthis code will provide an input widget where the characters are starred out which is appropriate for a password field. plugins can even provide their own widgets by subclassing FieldWidget but this is absolutely not nessasserry \nthis will check to see if the current screen is composited and emit a warning \nThe above example produces the following image \n\n\n"});