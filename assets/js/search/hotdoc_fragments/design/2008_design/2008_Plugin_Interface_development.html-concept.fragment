fragment_downloaded_cb({"url": "design/2008_design/2008_Plugin_Interface_development.html#concept", "fragment": "Concept \nA plugin needs to communicate in two ways the main application needs to be able to talk to plugin code call methods and such and plugin code needs to be able to communicate back via some sort of API currently pitivi handles the first problem with zope interfaces which works nicely the second problem is ignored plugins must query pitivi s internal code via pitivi.instance.PiTiVi which contains the programs instance. \nThe problem with this direction is that any internal code changes will break plugin compatibility and further more it increases the difficulty of the casual user writing plugins as they are required to be intimately knowledgeable of pitivi s internal code. \nThe tried and tested solution to this problem is to develop a plugin API the API will handle any communication from the plugin to pitivi by abstracting pitivi.instance.PiTiVi with a stable API. The plugin can then make simple calls such as api.gui.add_menu_item and be confident that the API will not change from version to version. \n"});