fragment_downloaded_cb({"url":"design/2008_design/2008_Architectural_Redesign/ObjectFactory.html#page-description","fragment":"ObjectFactory are the descriptions of objects producing and/or\nconsuming data streams.\nThis implies ALL The potential streams the factory can\nprovide/consume.\nEx: A FileSourceFactory of a raw DV File will list the following\nstreams:\nvideo/x-dv,systemstream=True, The container stream,\nvideo/x-dv,systemstream=False, The I-Frame only DV video stream,\nvideo/x-raw-yuv, The decoded raw video stream\naudio/x-raw-int, The audio stream\nThey produce GStreamer elements for all, or a selected number of,\nstreams.\nSome factories will be able to produce a different GStreamer element\nevery time, some will only be able to produce one at a time (Ex:\nVideo4Linux source, or audio sink with retarded backend that can have\nmultiple sockets opened).\nDescribes the properties of a file specified by:\nThis might be one of the most commonly used ObjectFactory. A single\ninstance of a FileSourceFactory can be used for:\nDescribes a Hardware Device that can produce streams. This ObjectFactory\nwill most likely be provided by the HardwareBrowser.\nThis will be used most likely when recording or capturing.\nDescribes any kind of operation, which can be an A/V Effect, an Encoding\ncontainer, or even a Hardware processing effect (like OpenGL powered),\nor even more complex effect.\nThis allows aggregating streams from various factories at the same time,\nwith an eventual offset between each streams.\nThis allows creation groupings of different factories with:\nMaybe we should have a way to specify the properties/methods/... of some\nof these use-case:\n\n\nThey contain a list of the Stream(s) they can produce and/or\nconsume.\n\n\n\nvideo/x-dv,systemstream=True, The container stream,\n\n\nvideo/x-dv,systemstream=False, The I-Frame only DV video stream,\n\n\nvideo/x-raw-yuv, The decoded raw video stream\n\n\naudio/x-raw-int, The audio stream\n\n\nThey produce GStreamer elements for all, or a selected number of,\nstreams.\n\n\n\n\nName, unique for that given ObjectFactory instance type.\n\nInputStreams, a list of Stream(s) the given factory can consume.\nEmpty for SourceFactory.\n\nOutputStreams, a list of Stream(s) the given factory can produce.\nEmpty for SinkFactory.\n\n\n\nDescription , a description of the ObjectFactory\n\n\n\nmakeBin(streams=[]), returns a gst.Bin for the given Streams. If\nno Streams are specified, then a gst.Bin for all the available\nstreams is returned. If only one Stream is specified, then the\ngst.Bin returned will not contain any queue in it.\n\n\nA URI\nA list of streams the file can provide (This information can come\nfrom the Discoverer, or some other source)\nMetadata regarding the file\n\n\nPreviewing the file\nUsing it many times in the timeline (which have different position,\nin/out points, streams used, etc...)\n\n\nA description of the hardware\nA list of streams it can provide (An local SoundCard could provide\nseveral streams if it has several inputs).\n\n\nA list of streams it can process\nA list of resulting streams it can/will output\n\n\nAudio and Video captured on separate devices during a shoot. We\ncould link all those separate A/V content into one source, allowing\nfixing of synchronization, and then be usable as one item in a\ntimeline.\n\n\nLocalSourceDevicesFactory : SourceDeviceFactory aggregating all\navailable LocalSourceDevice on the current system. We can then\neasily switch between the various devices, while keeping track of\none consistent object.\n\n\nLocalSinkDevicesFactory : Same as above but for all available A/V\nsinks on the device.\n\n\nLinkedOperationFactory : Synchronized effect for use in the\npipeline. Imagine a 'thunder' effect that has synchronized audio and\nvideo effect.\n\n\nMultipleQualitySourceFactory : SourceFactory that can provide a\nvariety of different 'qualities' off the content. This could enable\nswitching between a lower-quality (fast for editing) and a\nhigher-quality (needed for final rendering).\n\n\ntime offsets for each factory,\ndifferent in-out points per factory,\npriorities of placement of each factory\n\n\nOnlineFactoryInterface : For sources (or sinks/destinations) which\ncorrespond to non-local content, which requires doing an action\n(Download/Upload) to get/use a local content. Ex : Youtube sources,\nwhich requires downloading a local copy to edit it. DV VCR, which\nrequires doing a capture.\n\n\nLiveFactoryInterface : This applies to all factories that only\nconsumes/processes/produces live. Ex: a Webcam source, or a\nStreamingSink. They too require a 'record' phase in order to produce\na local, editable, copy.\n\n"});