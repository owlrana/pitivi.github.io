fragment_downloaded_cb({"url": "design/2008_design/2008_Architectural_Redesign/Browsers.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Browsers.md\">\n<h1 id=\"goal\">Goal</h1>\n<p><code>Browser</code>s are meant to assist in three things:</p>\n<ul>\n<li>Media Asset Management, here called <strong>Content Browsers</strong>,</li>\n<li>Operation Management, here called <strong>Operation Browsers</strong>,</li>\n<li>Device Management, here called <strong>Device Browsers</strong></li>\n</ul>\n<p>All <code>Browser</code>s produce/consume ObjectFactory in output/input . They are\nthe main providers/consumers (along with\n<a href=\"New_Design_2008/Formatter.md\">Formatter</a>) for ObjectFactory\nanywhere else in the Application.</p>\n<p>New types of <code>Browsers</code> can be created through the plugin interface to:</p>\n<ul>\n<li>Offer access to a new type of MAM (for storing/retrieving/searching\ncontent)</li>\n<li>Offer discoverability of devices through a new system (HAL doesn't\nexist on windows !)</li>\n<li>...</li>\n</ul>\n<h1 id=\"browser-types\">Browser types</h1>\n<h2 id=\"content-browsers\">Content Browsers</h2>\n<p>These Browsers can be listed individually for access to specific\nservices.</p>\n<p>They only return content of type <code>SourceFactory</code></p>\n<ul>\n<li>Local content\n<ul>\n<li><a href=\"file://\">file://</a> (standard system)</li>\n<li>F-Spot catalog browsing</li>\n<li>Tracker</li>\n<li>...</li>\n</ul>\n</li>\n<li>Remote content\n<ul>\n<li>Tape catalog, or any other kind of professional MAM system</li>\n<li>Flickr</li>\n<li>Youtube</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<p>These browsers MUST offer at least the following functionality:</p>\n<ul>\n<li><code>getFactory(</code><em><code>uri</code></em><code>)</code> , returns the <code>ObjectFactory</code> for the given\nuri.</li>\n</ul>\n<p>The browsers CAN also offer these functionality:</p>\n<ul>\n<li><code>storeFactory(</code><em><code>factory</code></em><code>,</code><em><code>uri</code></em><code>)</code>, stores the given\n<code>ObjectFactory</code> with the given uri. It returns an <code>ObjectFactory</code>\nwhich might be the same as the input, or a new one, or a a temporary\nnew one.</li>\n<li>Searching/Browsing functionnalities</li>\n</ul>\n<p>Browsers should use the <strong>UI Bundle</strong> system to provide adequate UI\ninterfaces if needed.</p>\n<h2 id=\"operation-browser\">Operation Browser</h2>\n<p>They only return content of type <code>OperationFactory</code>.</p>\n<p>The default implementation will just look for all available GstElement\nof a given type and return simple OperationFactory objects wrapping\nthem.</p>\n<p>Another implementation will be in charge of handling all the pitivi\nplugins providing different OperationFactory.</p>\n<h2 id=\"device-browser\">Device Browser</h2>\n<p>Only returns content of type <code>DeviceFactoryInterface</code>.</p>\n<p>It MUST provide the following functionality:</p>\n<ul>\n<li><code>getDefaultSinks()</code> , which should return the default usable\nSinkDeviceFactory.</li>\n<li><code>getDefaultSources()</code>, which should return the default usable\nSourceDeviceFactory.</li>\n</ul>\n\n</div>\n\n\n        "});