fragment_downloaded_cb({"url":"design/2008_design/2008_Architectural_Redesign/Pipeline.html#page-description","fragment":"\nA Pipeline is where all the media processing takes place in PiTiVi.\nIn order to hide the complexity of the underlying GStreamer pipeline, we\nonly have to work with 3 concepts:\n\nThis is the simplest use-case for a Pipeline, which is viewing a File.\nAs can be seen in the Schema, there is only one action (ViewAction)\nwhich connects a SourceProducer to a LocalSinksConsumer.\n\nIn this example, we are doing 2 actions at the same time:\nSupposing we already had our Timeline Pipeline (With the\nTimelineProducer, LocalSinksConsumer and ViewAction), we just had to:\nWhen we are done rendering (because we got an EOS or such), we can then:\n\n\n\nProducer(s), responsible for providing data streams and the\nassociated GStreamer elements\n\nConsumer(s), responsible for consuming data streams and the\nassociated GStreamer elements\n\nAction(s), which brings in the combination of:\n\nWhich Consumer(s) and Producer(s) to use, and how to link the\nassociated GStreamer elements\nWhat the overall Action is, useful for the UI to provide the\nadequate interface for each action\n\n\n\n\nWhich Consumer(s) and Producer(s) to use, and how to link the\nassociated GStreamer elements\nWhat the overall Action is, useful for the UI to provide the\nadequate interface for each action\n\n\nActions, the list of Actions currently being used in the pipeline\nProducers, the list of Producers being used\nConsumers, the list of Consumers being used\n\n\n\naction-added, a new Action was added to the pipeline\n\naction-removed, an Action was removed to the pipeline\n\n\nFactory, the ObjectFactory being controlled by this Producer\nPipeline, the Pipeline in which this Producer is being used\n\n\nCompatibleFactory, a list of ObjectFactory types this Producer can\nmanage\n\n\nfactory-changed\n\n\nFactory, the ObjectFactory being controlled by this Consumer\nPipeline, the Pipeline in which this Consumer is being used\n\n\nCompatibleFactory, a list of ObjectFactory types this Consumer can\nmanage\n\n\nfactory-changed\n\n\nPipeline, on which it is being used, or going to be used\nProducers, that this Action is controlling\nConsumers, that this Action is controlling\nState, whether it is activated or not\n\n\nCompatibleProducer, a list of Producer types this Action can handle\nCompatibleConsumer, a list of Consumer types this Action can handle\n\n\nstate-changed\n\n\n\nViewing the Timeline and,\n\nRendering the Timeline.\n\n\nCreate a 'RenderAction' with our existing TimelineProducer as that\naction's producer,\nSet that Action on the Timeline\n\n\nUI: We get notified of a new Action set on the Pipeline, we\nopen the adequate UI for that Action (if needed).\n\n\nConfigure the newly created 'LocalRenderConsumer' which is the\nConsumer to which our RenderAction is linked to.\n\n\nUI: The Render Timeline interface linked to our action has\naccess to the configured Consumer and can open the adequate\nConfiguration Widget for that Consumer.\n\n\n\n\n\nUI: We get notified of a new Action set on the Pipeline, we\nopen the adequate UI for that Action (if needed).\n\n\n\nUI: The Render Timeline interface linked to our action has\naccess to the configured Consumer and can open the adequate\nConfiguration Widget for that Consumer.\n\n\nWe activate the Action on the pipeline\n\nThe pipeline gets reconfigured with all activated actions\n\n\nWe set the pipeline to PLAYING\n\n\nThe pipeline gets reconfigured with all activated actions\n\n\nRemove that Action from the Pipeline (which will deactivate the\naction first, resetting the pipeline internally at the same time)\n\n\nUI: We get notified an action has been removed, we close the\nrelated interface/widgets.\n\n\n\n\n\nUI: We get notified an action has been removed, we close the\nrelated interface/widgets.\n\n"});