fragment_downloaded_cb({"url":"design/2008_design/2008_Architectural_Redesign/Design_Thoughts.html#page-description","fragment":"This is a listing, not entirely sorted, of thoughts, remarks, things to\ndo, regarding PiTiVi's design, uses, etc...\nEventually, these ideas/thoughts/remarks ... will end up being split up\nfor a full-size (re)design/refactor document.\nThey could be sorted as following:\nActual inline-review done in the 'code-review' branch here :\nhttp://gitorious.org/projects/pitivi/repos/mainline\nThese issues/goals are not ordered, since they are all equally\nimportant.\nNot at all sorted\nIt seriously needs to be rethinked.\nThis was originally created to cope with 0.8 issues\nAn idea might be to have Producers and Consumers.\nMake sure the naming is coherent and comprehensible\nThumbnails, captures, etc...\nCurrently we only get sources from local files (even worse, it's using\ngnome-specific things)\nMake it generic\nIt provides ObjectFactory objects\nAllow access to various kinds of source provider\nSource providers might have extra information ==> ObjectFactory\nsubclasses\nFigure out what's the best way to solve this issue\nSee also the ideas in ObjectFactory above\nHere keyframes are not I-frames but 'key positions'\nThere's two different use-cases in fact\nAllow easy creation of (parts of) the Timeline\nHow do we handle this properly ?\nAllow cleanly support Projects using unavailable\nsubclasses/plugins/effects.\nDistributions should support this !\nOptimize the following use cases\nOne idea for this would be to have a 'block-rebuild' property on\nGnlComposition that would mark down that is has (or not) to rebuild the\ninternal stack, but postpone it until the property has been set back to\nFalse.\nThese are some (long term) ideas I have\n\nCoding Style : Urgent\nCore Features\n(long term) goals\nVision (use cases ?)\n\n\nWhat is too slow ?\nWhat is not flexible enough ?\nWhat is not re-usable ?\nWhat is hard to use ?\nWhat is unclear ?\nWhat is not needed ?\nWhat is in the wrong location ?\n\nSplit up code\n\n\n\n\nSplit up code\n\n\n\nNo code shall access private values directly\n\nUse setter/getter and python 'property' mapper\nEx: myprop = property(_get_myprop,_set_myprop)\n\n\n\n\n\nUse setter/getter and python 'property' mapper\nEx: myprop = property(_get_myprop,_set_myprop)\n\n\n\n\nCore code shall NOT contain any UI-specific code (and\nvice-versa)\n\nThis breaks the fundamental Core/UI separation\nAny code in core that has ui-specific code should be moved to\npitivi.ui modules\nAnd the opposite for core code in the UI (ex.\npitivi.ui.plumber)\n\n\n\n\nThis breaks the fundamental Core/UI separation\nAny code in core that has ui-specific code should be moved to\npitivi.ui modules\nAnd the opposite for core code in the UI (ex.\npitivi.ui.plumber)\n\n\n\nAll Core/UI classes can be subclassable for specific usage\n\nThis is essential for full pitivi flexibility, for having all\nkinds of plugins, for having different UI, etc...\n\n\n\n\nThis is essential for full pitivi flexibility, for having all\nkinds of plugins, for having different UI, etc...\n\n\n\nSplitup code in subdirectories/submodules\n\nMaybe not as much as one class per file... but that would be a\ngood goal\nDefinitely ONE base class per file though\n\n\n\n\nMaybe not as much as one class per file... but that would be a\ngood goal\nDefinitely ONE base class per file though\n\n\n\nUI is NOT compulsory ==> pitivi can be used as a LIBRARY\n\nThere are several tools for which we need all the code from\npitivi core without a UI implementation\nEx : rendering backends, command-line/scripting tools, ....\nDisambiguate the naming somewhere\n\n\npitivi : python module/library\n\nPiTiVi : application using the pitivi module\n\n\nStill, we should have most of the UI logic in that library, but\nwithout any forced implementation (like qt/gtk/win32...)\n\n\n\n\nThere are several tools for which we need all the code from\npitivi core without a UI implementation\nEx : rendering backends, command-line/scripting tools, ....\nDisambiguate the naming somewhere\n\n\npitivi : python module/library\n\nPiTiVi : application using the pitivi module\n\n\nStill, we should have most of the UI logic in that library, but\nwithout any forced implementation (like qt/gtk/win32...)\n\n\n\npitivi : python module/library\n\nPiTiVi : application using the pitivi module\n\n\n\nNo gnome/gtk/gobject/gst specific code in base classes\n\nThis should go in subclasses\nCreate our own event-based interface (to remove dependency on\ngobject.GObject)\n\nJohan might have ideas about this\n\n\n\n\n\n\nThis should go in subclasses\nCreate our own event-based interface (to remove dependency on\ngobject.GObject)\n\nJohan might have ideas about this\n\n\n\n\nJohan might have ideas about this\n\n\n\nUse generators/yield wherever it can be applied\n\nSpeedup and memory usage improvement\n\n\n\n\nSpeedup and memory usage improvement\n\n\n\nThe only HARD DEPENDENCIES of pitivi are python core libraries and\ngstreamer\n\nAll other dependencies are optional and should be used from\nplugins\n\n\n\n\nAll other dependencies are optional and should be used from\nplugins\n\n\n\nRemove the global instance code\n\nNo code should depend on a single instance of application and\nproject\nNeeded to be able to load many projects in one instance (amongst\nother things)\nThe majority of the pitivi module should be non-application\nmodules\n\n\n\n\nNo code should depend on a single instance of application and\nproject\nNeeded to be able to load many projects in one instance (amongst\nother things)\nThe majority of the pitivi module should be non-application\nmodules\n\n\nUnit tests for pitivi core\n\n\n\nPrepare for Python 3\n\nArticle/presentation by Guido about this :\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=227041\n\n\n\n\n\nArticle/presentation by Guido about this :\nhttp://www.artima.com/weblogs/viewpost.jsp?thread=227041\n\n\n\nAllow formats to create their own subclasses of core classes\n\nSubclassing FileSource to add format-specific information\nSubclassing FileSourceWidget to show that format-specific\ninformation in the UI\n\n\nPluggable format support\nSee Undo/Redo\nWe need a native PiTiVi format\nNeed to be able to save files used in the project\nHandle files/directories being moved, or loading the project on a\ndifferent computer\nSimple support for playlists (ELD, PLS, ASX ?)\n\n\nSubclassing FileSource to add format-specific information\nSubclassing FileSourceWidget to show that format-specific\ninformation in the UI\n\n\nSome actions might be specific to a plugin\n\n\nThis is currently implemented using hacks\n\n\nActually use ObjectFactory for producing its content\nRemove limitation of only one brother per object\nAllow re-using identical source/composition many times in a\ncomposition\n\nFully synchronized (modifications to one instance are spread to\nall instances)\nNot synchronized (they're copies)\nHalf synchronized (only some properties modifications are\nsynchronized to all instances)\n\n\n\n\nFully synchronized (modifications to one instance are spread to\nall instances)\nNot synchronized (they're copies)\nHalf synchronized (only some properties modifications are\nsynchronized to all instances)\n\n\nClarify its usage\n\nIt contains the global information of objects you can use in the\ntimeline\nFor *any* object you can use in the timeline (source, fx,\ntransition, composition, etc....)\n\n\nCreate notion of SubObjectFactory\n\nThey use a smaller area/time of the parent object (cutting a\ncaptured video)\nOr they could be corrected/modified versions of the original\nsource (i.e. they have extra effects applied to the source)\n\nColour balance correction\nAudio Correction\nMedia conversion (ex : Use goom to make a video stream out\nof an audio track)\n\nThe 'media-converted' ones could maybe done on the fly\nif you add a file of a given media type (ex:audio) into\na track of another media type (ex:video).\n\n\n\n\n\n\nAllow easy transcoding, re-rendering or re-muxing of\nSubObjectFactory.\nAllow adding extra (meta)data\n\n\nIt contains the global information of objects you can use in the\ntimeline\nFor *any* object you can use in the timeline (source, fx,\ntransition, composition, etc....)\n\n\nThey use a smaller area/time of the parent object (cutting a\ncaptured video)\nOr they could be corrected/modified versions of the original\nsource (i.e. they have extra effects applied to the source)\n\nColour balance correction\nAudio Correction\nMedia conversion (ex : Use goom to make a video stream out\nof an audio track)\n\nThe 'media-converted' ones could maybe done on the fly\nif you add a file of a given media type (ex:audio) into\na track of another media type (ex:video).\n\n\n\n\n\n\nColour balance correction\nAudio Correction\nMedia conversion (ex : Use goom to make a video stream out\nof an audio track)\n\nThe 'media-converted' ones could maybe done on the fly\nif you add a file of a given media type (ex:audio) into\na track of another media type (ex:video).\n\n\n\n\nThe 'media-converted' ones could maybe done on the fly\nif you add a file of a given media type (ex:audio) into\na track of another media type (ex:video).\n\n\nSwitch to a smarter and more efficient debugging system\n\nUse logging module ?\ndo as flumotion ?\n\n\n\n\nUse logging module ?\ndo as flumotion ?\n\n\nFigure out how to cleanly solve the problem of plugins extending\nboth CORE and UI classes\n\nflumotion use some kind of bundles for this\n\n\n\n\nflumotion use some kind of bundles for this\n\n\nDo we still need the playground ??\nSmartBin isn't flexible enough\n\nWe might need to have more than two running at the same time\nDoesn't support being connected to more than one sink\nNeed to support features like Viewing Video while recording\nVideo AND Audio\n\n\n\n\nWe might need to have more than two running at the same time\nDoesn't support being connected to more than one sink\nNeed to support features like Viewing Video while recording\nVideo AND Audio\n\n\nProducer\n\nCan be a Timeline, live stream, File source, camera, webcam ,...\n(more or less like SmartBin now)\nIt has a clean way of querying what it can produce\nWe can connect multiple times to a stream (Audio, Video, ...) it\nproduces\n\n\nConsumer\n\nCan be an Encoder, Hardware sinks, Raw File renderer, Network\nStream renderer, ...\nHas a buffering property\n\n\n\n\nCan be a Timeline, live stream, File source, camera, webcam ,...\n(more or less like SmartBin now)\nIt has a clean way of querying what it can produce\nWe can connect multiple times to a stream (Audio, Video, ...) it\nproduces\n\n\nCan be an Encoder, Hardware sinks, Raw File renderer, Network\nStream renderer, ...\nHas a buffering property\n\n\nGet rid of the notions of 'threads' in bins (sooooo 0.8)\nUse proper naming from the editing world\nAdd a glossary in the documentation\n\n\nWhere do we store them ?\nHow do we manage them ?\n\n\nMove plumber to core\nHave some discovery utility (i.e. several audio/video sinks)\n\nHave it subclassable\n\nUse HAL on linux\nUse ??? on win, etc....\n\n\n\n\nHave some generic classification system (os/system agnostic)\n\nAudio\nVideo\nSource\n\nLocal\nCamera\nNetwork\n\n\nSink\n\nLocal\nNetwork\n\n\n???\n\n\nSee SmartBin and Playground above\n\n\nHave it subclassable\n\nUse HAL on linux\nUse ??? on win, etc....\n\n\n\n\nUse HAL on linux\nUse ??? on win, etc....\n\n\nAudio\nVideo\nSource\n\nLocal\nCamera\nNetwork\n\n\nSink\n\nLocal\nNetwork\n\n\n???\n\n\nLocal\nCamera\nNetwork\n\n\nLocal\nNetwork\n\n\nneeded for complex videos/operation\nHave a caching system for frame forward/backward operation\n\nWould act like a queue, except it would intercept seeks, do the\noriginal one, then do a second [1s before, 1s after] seek to\nhave the data available straight away for step-by-step seeking\n\n\n\n\nWould act like a queue, except it would intercept seeks, do the\noriginal one, then do a second [1s before, 1s after] seek to\nhave the data available straight away for step-by-step seeking\n\n\nFor I-frame only codecs (DV, JPEG,...), we should be able to only\ndecode/process/encode parts that have be modified\n\nWould require gnonlin and core pitivi classes to support non-raw\nstreams\n\n\n\n\nWould require gnonlin and core pitivi classes to support non-raw\nstreams\n\n\nHave base classes for capture support in core\nSee Hardware source and sinks\nWe absolutely need support for DV and HDV\n\n\n\nMake it generic\n\n\nIt provides ObjectFactory objects\n\n\nAllow access to various kinds of source provider\n\nLocal providers (filesystem, F-Spot, Gnome media (SoC project),\n...)\nNetwork providers (Media Asset Management)\nP2P ? Using telepathy and tubes ?\n\n\n\nSource providers might have extra information ==> ObjectFactory\nsubclasses\n\n\nFigure out what's the best way to solve this issue\n\nUse a source provider (let's say youtube) and grab some files\nYou want to modify those files (let's say apply a colourbalance,\nor cut out what you need) to have SubObjectFactory\nYou save your project (where/how do you save those files ? Do we\nleave them as a youtube link ?)\nYou reload your project... but you don't need the youtube\nbrowser anymore (you've already got your sources)\n\n\n\n\n\nPROBLEM Disambiguate SourceProvider and SourceBrowser.\nI'd say the difference is that stuff from SourceProvider(s)\nhave to be moved in the SourceBrowser before being used in\nthe timeline.\n\n\n\n\n\nSee also the ideas in ObjectFactory above\n\n\n\nLocal providers (filesystem, F-Spot, Gnome media (SoC project),\n...)\nNetwork providers (Media Asset Management)\nP2P ? Using telepathy and tubes ?\n\n\n\n\n\nPROBLEM Disambiguate SourceProvider and SourceBrowser.\nI'd say the difference is that stuff from SourceProvider(s)\nhave to be moved in the SourceBrowser before being used in\nthe timeline.\n\n\n\n\n\nPROBLEM Disambiguate SourceProvider and SourceBrowser.\nI'd say the difference is that stuff from SourceProvider(s)\nhave to be moved in the SourceBrowser before being used in\nthe timeline.\n\n\nAdd support in:\n\nObjectFactory (interesting points, user-introduced data, could\nbe stored with/along the file...)\nTimelineObject (instance specific property modification)\nUI\n\n\n\n\nObjectFactory (interesting points, user-introduced data, could\nbe stored with/along the file...)\nTimelineObject (instance specific property modification)\nUI\n\n\nSupport multiple versions of one source\n\nEx :\n\nlow resolution versus HD/4K\nDistributed/P2P files (first download lowest resolution)\n\n\nUse thumbnail when file not available yet.\n\n\nif it's a network URI, option to save it locally\n\ndetect if remote source has changed\n\n\nSupport for separate index (save/load support)\nAdd basic tests to make sure the sources will behave properly with\npitivi\n\nex : testing seeking support\nIf not, propose transcoding, or plugin to download, etc...\n\n\n\n\nEx :\n\nlow resolution versus HD/4K\nDistributed/P2P files (first download lowest resolution)\n\n\nUse thumbnail when file not available yet.\n\n\nlow resolution versus HD/4K\nDistributed/P2P files (first download lowest resolution)\n\n\ndetect if remote source has changed\n\n\nex : testing seeking support\nIf not, propose transcoding, or plugin to download, etc...\n\n\nSteroscopic or multi-angle support (multiple video tracks)\nEditing together multiple videos from the same scene (one video\ntrack)\n\nYou want a way to view all the input videos at the same time,\nsynchronized, so you know which ones to select at any given\npoint\nThis of it as a non-live mixing-desk\n\n\n\n\nYou want a way to view all the input videos at the same time,\nsynchronized, so you know which ones to select at any given\npoint\nThis of it as a non-live mixing-desk\n\n\nHave a gst_launch plugin where users can create their own freeform\neffect pipeline\nAllow concatenation/coupling of existing effects into a bigger one\n\nBonus for adding some scripting in it !\n\n\nHave Audio+Video effects\n\nThey're in fact two/more separate effects that have\nsynchronization\nEx : photo flash effect : you want to have the 'flash' sound in\nsync with the 'whiteout'/still frame on the video side\n\n\n\n\nBonus for adding some scripting in it !\n\n\nThey're in fact two/more separate effects that have\nsynchronization\nEx : photo flash effect : you want to have the 'flash' sound in\nsync with the 'whiteout'/still frame on the video side\n\n\nShould have a clean content/Script separation\n\nEx : Interview script : have the interview person's name\nseparated from the actual video on which to overlay his name\n\n\nAllow subclassing\n\nEx : You can create different ways of displaying the\ninterviewee's name, different ways to blend in/out, ...\n\n\nHave a repository for those scripts/scenarios\n\nPeople can easily share/use/reuse existing scenarios\n\n\n\n\nEx : Interview script : have the interview person's name\nseparated from the actual video on which to overlay his name\n\n\nEx : You can create different ways of displaying the\ninterviewee's name, different ways to blend in/out, ...\n\n\nPeople can easily share/use/reuse existing scenarios\n\n\nText track ?\nUse case : karaoke/subtitle overlay\n\n\nMight not be available\nMight be proprietary/custom\nOlder version of PiTiVi\n\nProvide a way to upgrade the feature/plugin\n\n\n\n\nProvide a way to upgrade the feature/plugin\n\n\nAllow transcoding sources only\nUseful also for making sources more editing-friendly\nOr to have lower resolution versions to work with\n\n\nResizing/Trimming\n\nBy end (modifying media_duration + duration)\nBy beginning (modifying\nmedia_start+start+media_duration+duration)\n\n\nMoving many objects at once\n\n\nBy end (modifying media_duration + duration)\nBy beginning (modifying\nmedia_start+start+media_duration+duration)\n\n\ninterlaced support\n\ncaps (differentiate raw frame/fields)\nBuffer Flags (TFF, Repeat)\n... and obviously support in virtually all relevant plugins\n\n\nPerfect Profesionnal Colourspace support\n\nVarious Subsampling + Chroma placement (right now we don't make\na difference between 4:2:0 jpeg/mpeg2/dv-ntsc ... whereas they\nhave different chroma placement)\nVarious Clamping matrices (HDYC for example)\nFAST and bit-accurate converters\n\nThis might require making a generic colourspace converter\nbin which searches all required/available colourspace\nconverters\n\n\n\n\n\n\ncaps (differentiate raw frame/fields)\nBuffer Flags (TFF, Repeat)\n... and obviously support in virtually all relevant plugins\n\n\nVarious Subsampling + Chroma placement (right now we don't make\na difference between 4:2:0 jpeg/mpeg2/dv-ntsc ... whereas they\nhave different chroma placement)\nVarious Clamping matrices (HDYC for example)\nFAST and bit-accurate converters\n\nThis might require making a generic colourspace converter\nbin which searches all required/available colourspace\nconverters\n\n\n\n\nThis might require making a generic colourspace converter\nbin which searches all required/available colourspace\nconverters\n\n\nWe need more screenshots\nPropose nightly builds\n\n\nGoogleMaps/OpenStreetMap plugin\n\nUse maps to show a trip\nZoom-in/zoom-out/move from location to location between the\nvarious steps\nCould use photo geotags to automatically known where to go\n\n\n\n\nUse maps to show a trip\nZoom-in/zoom-out/move from location to location between the\nvarious steps\nCould use photo geotags to automatically known where to go\n\n\nPhoto Flash\n\nCould be a nice way to do transitions when doing slideshows\nCould have a 'flash' sound on the audio track, sync-ed with it\n\n\n\n\nCould be a nice way to do transitions when doing slideshows\nCould have a 'flash' sound on the audio track, sync-ed with it\n\n\nFilm-reel at slow-speed\n\nStart from a still frame/picture\nGradually speed up the movie\nYou see the 'film-reel border' moving (i.e. at some points the\ninter-frame black borders will be visible)\nHave a flickering soundtrack\n\n\n\n\nStart from a still frame/picture\nGradually speed up the movie\nYou see the 'film-reel border' moving (i.e. at some points the\ninter-frame black borders will be visible)\nHave a flickering soundtrack\n\n"});