fragment_downloaded_cb({"url":"design/2008_design/2008_Architectural_Redesign/Timeline.html#page-description","fragment":"The Timeline object:\nThose TimelineObjects can control one or many TrackObjects from one or\nmany Tracks of the Timeline.\nThe goal of the Timeline is to offer an API suited for fast UI\ncoding. The UI can then decide whether to listen to events/modifications\ntaking place on the overall Timeline, or on the individual Tracks.\nThis allows both creating simple and complex UI while offering the\nsame interfaces\nAll of the following editing actions must be done on the Timeline,\nTimelineObject(s) or TimelineSelections and not on the Track(s)\nor TrackObject(s):\ntracks : Ordered list of Tracks controlled by the Timeline\nselections : List of TimelineSelection in use.\nobjects : Ordered list of TimelineObject controlled by the Timeline. First ordered by start property, and then by priority.\nfactory : The TimelineFactory to use in Pipelines.\nobjects : Ordered list of TrackObjects controlled by the Track.\nstream : The Stream of the Track.\n\nfactory : The ObjectFactory this TimelineObject corresponds to.\n:   None is an accepted value\nstart : The position of the TimelineObject.\nduration : The duration of the TimelineObject.\nin-point : The in-point of the contents of the TimelineObject.\nout-point : The out-point of the contents of the TimelineObject.\npriority : The priority of the TimelineObject.\nmin-start : The earliest time to which we can set the start property of the TimelineObject with the trimStart method\nmax-duration : The maximum value we can set the duration property of the TimelienObject to\n; track-objects :: The TrackObject(s) it the TimelineObject controls.\n; track : the track to which the object belongs\n; object : The actual TrackObject\n; time-offset : The offset between the TimelineObject start position and the TrackObject start position. ALWAYS POSITIVE.\n; priority-offset : The offset between the TimelineObject priority and the TrackObject priority. ALWAYS POSITIVE.\nobjects : The list of TimelineObject controlled by the TimelineSelection\n\nparent : The TimelineObject controlling this TrackObject. All the properties below MUST NOT BE MODIFIED DIRECTLY but through the parent TimelineObject.\nstart : The position of the TrackObject.\nduration : The duration of the TrackObject.\nin-point : The in-point of the contents of the TrackObject.\nout-point : The out-point of the contents of the TrackObject.\npriority : The priority of the TrackObject.\nThe diagram below shows the relationship between Timeline, Tracks,\nTimelineObject and TrackObjects.\nEach TimelineObject controls at least one TrackObject in any of the\nTimeline's Tracks.\nWe can see here that the two first TimelineObject control one\nTrackObject per Track. But the last TimelineObject only controls a\nTrackObject in the first Track.\nEach TrackObject of a given TimelineObject can have a relative offset\nThis can be seen with the 2nd TimelineObject where the TrackObject it\ncontrols in the second track doesn't start at the same position.\n\nThe following diagram shows the relationship between:\n\nWith the diagram above, the use-case of adding a source file to a\nTimeline becomes trivial:\nThe Timeline creates a TimelineObject compatible with the given\nObjectFactory type\nTimelines can therefore reject incompatible ObjectFactory like\nLive devices\nThe timeline looks for what Streams the ObjectFactory can\nconsume/provide\nFor each of the Streams that the ObjectFactory handles:\nFind a Track with a compatible Stream\nThe user can of course choose his own Stream<=>Track\nmapping\nCreate a TrackObject for that ObjectFactory Stream\nAdd the TrackObject to the Track\nLink the TrackObject to the newly created TimelineObject\nThe following diagram shows:\nThe links between TrackObject(s) and GnlObject(s) show their\nrelationship. \n\nWe have a TimelineObject 'X' controlling two TrackObject 'A' and 'B'\ncoming from a common ObjectFactory 'O'. This is the most common case\nwhen adding a Audio+Video File to the Timeline.\nWe want to handle the TrackObject(s) separately. Maybe to offset them,\nmaybe to remove one of the TrackObject, ...\n\nThis is the case when we had two TrackObjects originally belonging to\nthe same TimelineObject, but which we unlinked.\n\nThis is for the more generic case of linking two TrackObjects. A common\nexample is when we recorded Audio and Video on separate devices/files.\n\nAdding objects to the Timeline\nRemoving objects from the Timeline\nLinking and Unlinking objects\nGrouping and Ungrouping objects\nMoving objects\nChanging objects priority\nTrimming, Sliding, Rolling, and all other actions modifying any of\nstart duration in-point out-point priority.\n\n\nOne or many Tracks corresponding to the Project Settings.\nThere is one Track per output Streams (Most projects will\ntherefore have 2 Tracks, one for the Audio stream and one for the\nVideo stream).\nAn ordered collection of TimelineObjects. Those objects can be\nSources (producing content) or Operations (modifying content).\nA list of Selections, grouping several existing TimelineObject.\n\nThis is a convenience for modifying several distinct\nTimelineObjects at the same time.\nA TimelineObject can belong to several TimelineSelection\n\nA TimelineSelection can control one or many properties to\nkeep the modifications of those properties in sync\n(start-position, priority, in-point, out-point, ...)\n\n\nThe TimelineFactory, used in the\nPipelines (for viewing,\nrendering, ...).\n\n\nThis is a convenience for modifying several distinct\nTimelineObjects at the same time.\nA TimelineObject can belong to several TimelineSelection\n\nA TimelineSelection can control one or many properties to\nkeep the modifications of those properties in sync\n(start-position, priority, in-point, out-point, ...)\n\n\nContainers\n\nTimeline\nTrack\n\n\nObjects\n\nAt the Timeline level : TimelineObject\nAt the Track level : TrackObject\n\n\nObjectFactory\n\nAt the Timeline level : ObjectFactory\nAt the Track level : Streams(s) of an ObjectFactory\n\n\n\n\nTimeline\nTrack\n\n\nAt the Timeline level : TimelineObject\nAt the Track level : TrackObject\n\n\nAt the Timeline level : ObjectFactory\nAt the Track level : Streams(s) of an ObjectFactory\n\n\nPick the ObjectFactory corresponding to your source file\nAdd it to the Timeline\n\n\nThe Timeline creates a TimelineObject compatible with the given\nObjectFactory type\n\nTimelines can therefore reject incompatible ObjectFactory like\nLive devices\n\n\n\nThe timeline looks for what Streams the ObjectFactory can\nconsume/provide\n\n\nFor each of the Streams that the ObjectFactory handles:\n\n\nFind a Track with a compatible Stream\n\nThe user can of course choose his own Stream<=>Track\nmapping\n\n\n\nCreate a TrackObject for that ObjectFactory Stream\n\n\nAdd the TrackObject to the Track\n\n\nLink the TrackObject to the newly created TimelineObject\n\n\n\n\n\n\n\n\nThe Timeline creates a TimelineObject compatible with the given\nObjectFactory type\n\nTimelines can therefore reject incompatible ObjectFactory like\nLive devices\n\n\n\nThe timeline looks for what Streams the ObjectFactory can\nconsume/provide\n\n\nFor each of the Streams that the ObjectFactory handles:\n\n\nFind a Track with a compatible Stream\n\nThe user can of course choose his own Stream<=>Track\nmapping\n\n\n\nCreate a TrackObject for that ObjectFactory Stream\n\n\nAdd the TrackObject to the Track\n\n\nLink the TrackObject to the newly created TimelineObject\n\n\n\n\n\n\nFind a Track with a compatible Stream\n\nThe user can of course choose his own Stream<=>Track\nmapping\n\n\n\nCreate a TrackObject for that ObjectFactory Stream\n\n\nAdd the TrackObject to the Track\n\n\nLink the TrackObject to the newly created TimelineObject\n\n\n\nOn the left, the class hierarchy for TrackObject\nOn the right, the class hierarchy for the various GNonLin GStreamer\nelements.\n\n\nWe ask to unlink a certain TrackObject (B) from its controlling\nTimelineObject (X).\nThe TimelineObject (X) looks for the ObjectFactory (O) from which\nthe TrackObject (B) was created. In this case there's only one\nObjectFactory, but there could be several in the case of\nLinkedSources.\nIt creates a new empty TimelineObject (Y) for the selected\nObjectFactory (O). That new TimelineObject is a complete clone\nof (X) except for the list of TrackObject(s) it controls.\nIt removes the TrackObject (B) from the list of objects it's\ntracking. This means that:\n\n(B) temporarily has no controlling TimelineObject.\nThe TrackObject (B) has NOT been removed from the Track to which\nit belonged.\n\n\nIt adds the TrackObject (B) to the list of objects controlled by the\nnew TimelineObject (Y).\n\n\n(B) temporarily has no controlling TimelineObject.\nThe TrackObject (B) has NOT been removed from the Track to which\nit belonged.\n\n\nWe ask to link a TrackObject (B) to a TimelineObject (X).\nThe TimelineObject (X) compares the originating ObjectFactory of the\nTrackObject (B) and sees they are the same.\nThe TimelineObject (X) unsets the TrackObject (B) from its current\nparent TimelineObject (Y)\n\nIf (Y) is no longer controlling any TrackObjects, we remove it\nfrom the Timeline.\n\n\nThe TimelineObject (X) adds the TrackObject (B) to its list of\ncontrolled TrackObject.\n\n\nIf (Y) is no longer controlling any TrackObjects, we remove it\nfrom the Timeline.\n\n\nWe ask to link TrackkObject (B) to TrackObject (A)\nWe see they belong to originated from completely different\nObjectFactory, requiring a new TimelineObject to control the two.\nSince we don't want to lose the original relationships between\nTrackObject and ObjectFactory, we create a LinkedtimelineObject\n(XY), wrapping the two previously existing TimelineObject (X and Y).\n\n\nPossibility : Since all TimelineObject have a counterpart\nObjectFactory, we could automatically create a\nLinkedObjectFactory for the LinkedTimelineObject (XY) we just\ncreated\n\nThis allows infinite reuse of objects created in the\nTimeline.\n\n\n\n\n\n\n\nPossibility : Since all TimelineObject have a counterpart\nObjectFactory, we could automatically create a\nLinkedObjectFactory for the LinkedTimelineObject (XY) we just\ncreated\n\nThis allows infinite reuse of objects created in the\nTimeline.\n\n\n\n\nThis allows infinite reuse of objects created in the\nTimeline.\n\n\nDoes core need to provide some help for the UI's marker/keyframe\nhandling ?\nHow do we 'properly' handle the different kinds of linkage in\nLinkedTimelineObject\n\nSome people might just want to have synchronized 'start'\npositions, but independent priorities for the TrackObjects.\nSome people might want to have the priorities synchronized, but\nfreely move the positions of the TrackObjects.\n\n\n\n\nSome people might just want to have synchronized 'start'\npositions, but independent priorities for the TrackObjects.\nSome people might want to have the priorities synchronized, but\nfreely move the positions of the TrackObjects.\n\n"});