fragment_downloaded_cb({"url":"design/Proxy_editing_requirements.html#page-description","fragment":"See T2455 to learn about\nproxy editing and why we want this in GES and Pitivi.\nThis page is meant to brainstorm:\nPrior art if you don't know what proxy editing “feels” like:\nAs T2455 indicates, we can\nenvision two types of user experience: a semi-automatic and a\nfully-automated one. Since Pitivi is not the only application (now and\nin the future) using GES, we need to design the GES API to be flexible\nenough to accommodate the design needs of both kinds of applications.\nIn both cases, the experience must be:\nSince the Media Library's iconview is meant to be compact and\nminimalistic (and has a fair amount of technical limitations), we could\nuse the following icon metaphor system to indicate the states of proxies\nfor assets:\nStatus icon   Icon's opacity   Thumbnail's opacity   Meaning\nNone          N/A              100%                  Proxies are disabled for this asset\nGears/sync?   100%             50%                   A proxy is currently being generated for this asset\nCheckmark     70%?             100%                  Proxies are present and ready for this asset\n⚠ (warning)   100%             100%                  The proxy could not be generated for this asset\n⚠ or X        100%             50%                   A proxy file is present, but the original file is absent\nIn this mode, users would manually select which assets/clips use\nproxies, and when the proxies are generated. There would be no\n“automated” background processing. This is probably not what we want in\nPitivi in terms of the default user experience, however the GES API\nshould support that scenario. We could still provide this feature in\npitivi by:\nHowever this also means temporarily providing a “Cancel” button while\nthose clips' proxies are being generated. Additionally to the “status\nlights” icons mentioned earlier, we could perhaps show a progressbar\n(with a “Stop” button on its right) below the media library (similar to\nwhen we're importing clips).\nJakub commented:\n“Semi-automatic - I don't grok this experience. Why would I want to\nexplicitly hold the burden of being a transcoding manager? I like the\nvalidity checking and ability to explicitly re-render a proxy though.\nRan into issues in both kdenlive and FCPX where I spent ages looking\nfor a faulty proxy.”\nTo balance things, Bassam commented:\n\"manual vs. automatic: however the ui is chosen, this should be a per\nproject setting, not a choice of a different application. both\nworkflows are valid, and the same person might opt for one or another\ndepending on the specifics of the project. [...]\nOtherwise, the default behavior would be to transparently (and\nintelligently) create proxies for everything, in the background. When a\nproxy file does not exist for an asset (clip), create it and use it as\nsoon as it has been created.\nPerformance requirements in the automated scenario are even more\nimportant than in the semi-automated scenario; while users can expect\nsome delay (as long as there is a visual progress indication) when they\nmanually trigger an action, they must absolutely not feel\ndelays/sluggishness when such actions are triggered automatically. The\ngeneration of proxy clips in the background should not negatively impact\nsystem performance.\nJakub has a different opinion than Jeff's or Bassam's, suggesting (?)\nthat we make proxy generation a modal (blocking, in terms of UI)\noperation:\n\"You mention the problem of indicating the transcoding process as if\nyou could continue working with original assets and have that not stop\nyou from editing work with original media. In case of offline editing\n(either having assets on external drive, or networked/cloud storage),\nthe indication can be summed up to “tell me when my assets are safe to\ndisconnect and I'm able to proceed editing offline”. For low\nperforming systems, the background transcoding is just an illusion,\nyou cannot really edit until your assets are transcoded. So I think\nboth cases are best addressed by providing an aggregate progressbar\ntelling me when all assets referenced from the project are transcoded,\nrather than colorcoding individual clips, or worrying about preview\noverlays. [...] For offline editing I would agree not choking the\nsystem competely with transcoding might be a good thing, but for the\nlow performing system case you want the transcoding process to take\nthe foreground so that the assets are ready sooner. You really can't\ndo any 4k editing on a laptop and expect to also transcode proxies in\nthe background.\"\n\nUser interface/user experience (UX) possibilities and requirements\nGES API requirements deriving from that. This also touches on media\nassets management in general.\n\n\n\nIn Edius. This is an\ninteresting example of a badly designed UI: pretty much all the\noptions/preferences presented there are useless, the application\nshould be smart enough to make those choices!\n\nIn FCP X (alternative\nlonger version)\nIn Sony Vegas\nOthers we should be looking at in particular? Some particularly\ngreat (short and to the point) video tutorials of other apps we\nought to see? Let us know.\n\n\nIntuitive: it should be a very easily discoverable feature\nWith good visual indications of the process and progress. We should\nprobably have some sort of “yellow/green light” (red for errors)\nicons somewhere near each clip in the media library to indicate the\nstatus of individual proxies. Remains to be seen how we can do this\nwith iconview mode and listview mode without going insane.\nFluid, with no negative performance impacts from the act of\ngenerating the clip “proxies”\n\n\nProxies generation/processing needs to be pause-able\n\nWhen pitivi starts playback (or render) and needs the system's\nresources\nWhen the user pauses proxy generation (in the case of the\nsemi-automated UX)\n\n\nProxies generation needs to be cancel-able\n\nWhen the user asks to stop generating proxies for selected clips\n(in the case of the semi-automated UX)\n\n\nThe ability to “force” regenerating the proxies for a given asset\n(for whatever reason)\nDelete a proxy (or all proxies) for a given asset\nRelocate/move proxies for a given asset or for all assets\nAbility to manually replace an offline asset.\n\n\nWhen pitivi starts playback (or render) and needs the system's\nresources\nWhen the user pauses proxy generation (in the case of the\nsemi-automated UX)\n\n\nWhen the user asks to stop generating proxies for selected clips\n(in the case of the semi-automated UX)\n\n\nNeed a way to detect incomplete or invalid proxies, to handle\nvarious scenarios:\n\nThe user has quit the application before it was done processing\nThe application crashed\nThe source file has changed (use a md5 on the first few bytes of\nthe file like in pitivi/previewers.py and store that hash in the\nGES Asset?)\n\n\n\n\nThe user has quit the application before it was done processing\nThe application crashed\nThe source file has changed (use a md5 on the first few bytes of\nthe file like in pitivi/previewers.py and store that hash in the\nGES Asset?)\n\n\nFor each asset, report the proxies' encoding progress, so the\napplication UI can show progressbars or some other form of visual\nindications\nProvide a way to signal to the application that an asset has its\noriginal offline, or its proxy offline, or whatever situation we can\nimagine, so the UI can let the user know about it.\nTolerate and signal errors/failures.\n\n\nTolerate and signal errors/failures.\nProcessing should probably happen in a separate/sandboxed process,\nto ensure that GES/applications can't crash because of something\ngoing wrong during the processing of a proxy\nGES needs to handle the notion that an asset and/or any of its\nproxies can go offline/online. For example, if the original clip is\nnot available but the proxy version is present, consider the\noriginal “offline” and use the proxy version.\n\nThe way we handle “missing” media needs to change: currently\nPitivi just refuses to handle “partial” projects, but in theory\nit should “deal with it”. Even if all the assets of a clip\n(including proxies) are offline.\nIf an asset or its proxies were moved/renamed externally, allow\nspecifying the new location (already mostly implemented in GES\nassets?), but don't force it. Proxies/assets for which the user\nhas not provided replacements are to be marked as temporarily\n“offline” (we should also save info about the last time it was\nseen, its metadata/attributes, etc.).\n\n\n\n\nThe way we handle “missing” media needs to change: currently\nPitivi just refuses to handle “partial” projects, but in theory\nit should “deal with it”. Even if all the assets of a clip\n(including proxies) are offline.\nIf an asset or its proxies were moved/renamed externally, allow\nspecifying the new location (already mostly implemented in GES\nassets?), but don't force it. Proxies/assets for which the user\nhas not provided replacements are to be marked as temporarily\n“offline” (we should also save info about the last time it was\nseen, its metadata/attributes, etc.).\n\n\nMultiple ways to handle offline assets for rendering and export:\n\n“Draft render” mode (low quality render using only the proxies\ninstead of the original clips), as some applications might like\nto offer that feature.\nRendering to a multimedia output file requires original assets\nto be “online”. Otherwise, if only proxies are available, we\ncan:\n\nWarn the user about reduced quality. If some assets have no\noriginals and no proxies, show a serious warning.\nExport only an EDL (edit decision list), but that's another\nstory\n\n\n\n\n\nProvide a way to specify which containers, codecs and settings (ex:\nvideo resolution, bitrate/quality) to use for proxies. This will\nprobably use a technology similar to what we see in Pitivi's render\ndialogs.\nAllow multiple proxies per asset (for multiple resolutions, for\nexample). The application should be able to request a proxy to match\na particular context (ex: a maximum resolution or something); for\nexample, multicam editing could use very small versions if there is\na big number (ex: 16) of camera angles to be displayed\nsimultaneously. Or the media library could automatically show a\nplaying thumbnail-sized video preview when putting the mouse over a\nclip.\nAbility to save, in a project formatter's data, the following\nper-project overrides of the global app settings:\n\nA custom folder path for the proxies for that project (see also\nthe “where to store the proxies?” item in the “outstanding\nquestions” section on this page).\nWhether this project prefers fully-automated (or manual)\nhandling of proxies (Bassam said: “However the ui is chosen,\nthis should be a per project setting, not a choice of a\ndifferent application. Both workflows are valid, and the same\nperson might opt for one or another depending on the specifics\nof the project.”)\n\n\n\n\n“Draft render” mode (low quality render using only the proxies\ninstead of the original clips), as some applications might like\nto offer that feature.\nRendering to a multimedia output file requires original assets\nto be “online”. Otherwise, if only proxies are available, we\ncan:\n\nWarn the user about reduced quality. If some assets have no\noriginals and no proxies, show a serious warning.\nExport only an EDL (edit decision list), but that's another\nstory\n\n\n\n\n\nWarn the user about reduced quality. If some assets have no\noriginals and no proxies, show a serious warning.\nExport only an EDL (edit decision list), but that's another\nstory\n\n\n\nA custom folder path for the proxies for that project (see also\nthe “where to store the proxies?” item in the “outstanding\nquestions” section on this page).\nWhether this project prefers fully-automated (or manual)\nhandling of proxies (Bassam said: “However the ui is chosen,\nthis should be a per project setting, not a choice of a\ndifferent application. Both workflows are valid, and the same\nperson might opt for one or another depending on the specifics\nof the project.”)\n\n\nWhere to store the proxies? (beyond the obvious question of disk\nspace and tidiness, there's the question of people working across\nnetworks that raises interesting questions)\n\nIn pitivi we could default to the XDG user cache dir (which in\nthis case would turn out to be ~/.cache/pitivi/proxies/)\n...but Bassam insists that this can be overridden on a\nper-project basis. So in the project settings UI, we could have\na checkbox to “Use a custom directory to store proxies” that\nenables a gtk folder chooser button right besides it. Unchecking\nthe checkbox would clear the project's custom directory.\n\n\nFilenames of the actual proxy files depending on their location\n(global cache folder vs project folder?). For example, if a clip is\ncalled “foo.MOV”, should the proxies be called foo-360p.gesproxy, or\nfoo--proxy-360p.webm, or C462NTH353.webm in the hidden cache folder,\nor...?\nCodecs? So far we're hesitating between MJPEG and VP8. MJPEG is\nhandsdown the fastest codec to seek and to encode, since it is so\nsimple and every frame is a keyframe - however, the filesize is\nrather big. VP8 is more configurable and can be made to approximate\nMJPEG's seeking performance, but it is significantly more expensive\nto encode.\nResolutions, and how to handle aspect ratios. That is, how do you\ndetermine the appropriate resolution depending on the aspect ratio\nand resolution of the source material?\n\nGoing with a hardcoded percentage (ex: 50% of the original's\nresolution) can be bound to fail in scenarios where the original\nhas a huge native resolution (such as 4K).\nAlternatively, one can imagine a hardcoded (or configurable)\n“max resolution”, where clips bigger than that resolution will\nhave proxies created to “fit the box” (in terms of width and\nheight, whichever comes first). Hardcoding the box resolution\nmight be problematic as computers become more powerful and\nscreen resolutions increase.\nIdeally, we need a clever algorithm to figure out all of this\nautomatically. Any rough ideas of the logic here? Let us know.\nSolutions where the software can be smart enough to figure the\noptimal resolution to use, instead of having the user deal with\nit, are preferred.\n\n\nHandling “tarball export” in Pitivi\n\n\nIn pitivi we could default to the XDG user cache dir (which in\nthis case would turn out to be ~/.cache/pitivi/proxies/)\n...but Bassam insists that this can be overridden on a\nper-project basis. So in the project settings UI, we could have\na checkbox to “Use a custom directory to store proxies” that\nenables a gtk folder chooser button right besides it. Unchecking\nthe checkbox would clear the project's custom directory.\n\n\nGoing with a hardcoded percentage (ex: 50% of the original's\nresolution) can be bound to fail in scenarios where the original\nhas a huge native resolution (such as 4K).\nAlternatively, one can imagine a hardcoded (or configurable)\n“max resolution”, where clips bigger than that resolution will\nhave proxies created to “fit the box” (in terms of width and\nheight, whichever comes first). Hardcoding the box resolution\nmight be problematic as computers become more powerful and\nscreen resolutions increase.\nIdeally, we need a clever algorithm to figure out all of this\nautomatically. Any rough ideas of the logic here? Let us know.\nSolutions where the software can be smart enough to figure the\noptimal resolution to use, instead of having the user deal with\nit, are preferred.\n\n"});