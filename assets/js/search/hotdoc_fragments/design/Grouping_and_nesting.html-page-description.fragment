fragment_downloaded_cb({"url":"design/Grouping_and_nesting.html#page-description","fragment":"This page is intended to discuss the following concepts:\nFor the following objects:\nWhen managing video projects of more than trivial complexity, it is\noften crucial to be able to treat a group of objects on the timeline as\na unified object, from a user interface perspective. We are interested\nin finding methods of grouping that provide maximum user productivity at\nminimum development cost.\nAt one extreme, the minimum development cost approach is one that\nrequires exactly no code within Pitivi (or GES). Instead, we may create\na new gstreamer decoder element (e.g. pitividec) that takes as its input\nthe contents of a Pitivi project file. This decoder would reuse the GES\ncore to expose an interface equivalent to decodebin.\nOnce such an element is appropriately registered, decodebin,\nuridecodebin, and playbin will be able to play Pitivi project files as\nif they were video clips. This means that Pitivi project files would,\nwith no additional code, become playable in gstreamer-based players such\nas Totem (subject to CPU limitations, of course). Naturally, it also\nmeans that they are importable as clips into Pitivi itself, for use in\nhigher-level timelines.\nIn effect, this approach is equivalent to rendering out the project to\nan intermediate clip that is then imported into another project, except\nthat it avoids the cost in disk space and compression loss. A\nsufficiently advanced implementation might also negotiate output\nparameters such as resolution to avoid unnecessary scaling.\nThe disadvantage of this approach is that it does not provide the full\nflexibility of traditional grouping mechanisms. There is no way to\n“ungroup” (i.e. to flatten a part of the group hierarchy). There is no\nway to edit a group within the context of the larger project. This\nfunctionality may be worth implementing but it is not sufficient on its\nown to satisfy all our group management needs.\nTo provide more advanced functionality, we will require recursion that\nis not opaque to the Pitivi user interface. In Pitivi, source clips are\nimmutable, and this invariant seems worth preserving for the sake of\npredictable behavior. Therefore, if groups are to be editable (and\ndistinct from ordinary clips), they should not be implemented via the\nstandard clip mechanism as described above.\nTo allow the user interface to behave differently for groups than for\nindividual clips, while still preserving a simple recursive structure,\none solution is to have entire Pitivi sub-projects defined within a\nsingle project file, and inserted into the timeline as a\ntimeline-object. Then the “group” action generates a subproject\nequivalent to the selected items, deletes those items from the timeline,\nand adds the subproject-object to the timeline in their place. “Ungroup”\ndoes the reverse.\nWe should have a GESTimelineTimelineObject class (better name to be\nfound?), This class is a subclass of GESTimelineSource thus it is a\nwrapper around GnlSource (which is a GstBin itself), this bin would\ncontain a GESTimeline. Then the TrackObject of this TimelineObject\ncontain GESTrack themselves. We should have 3 ways of creating a\nGESTimelineTimelineObject:\nThe timeline contained in a GESTimelineTimelineObject can obviously also\ncontain themselves a GESTimelineTimelineObject so we can infinitely\nrecurse.\nBecause the UI can easily determine that a timeline-object is in fact a\ngroup, that object may be treated specially for UI purposes. In addition\nto exposing an Ungroup action, the object may also present an “Edit\nGroup” option. This would open a new timeline (perhaps a new Pitivi\nwindow) showing the contents of the group, allowing the user to make\nalterations without the clutter of the entire super-project.\nShould it be possible to cut, stretch, or apply effects to a group?\nDoing so potentially makes it impossible to “ungroup” (if, for example,\neffects are applied on top of transitions), and certainly makes\nungrouping require a certain amount of tricky logic to propagate global\nactions (like chopping out a chunk in time) down to the source clips. (I\nthink that it should be possible to apply such effects and arbitrary\noperations to a group, and that Ungroup should simply be disabled until\nall modifications to the group are removed.)\nShould groups be displayed in the superproject with “holes” in time\nwhere there is an empty time in the subproject timeline, or should they\nsimply be continuous? Should there be a mode where even more of the\ninternal structure is visible? (I think that, for a first\nimplementation, leaving them as continuous in the superproject UI is\nentirely sufficient and dramatically simpler to implement than the\nalternatives.)\nIs the duration of a group fixed or variable? If it is fixed, then we\nwill need some UI to indicate a timeline of fixed duration (in the\nsubproject editor). If it is variable, then what happens when the user\nuses the subproject editor to make the contents of the group longer?\nShould it expand in the super-project, or should excess time be ignored.\n(I think excess time should be ignored, with duration controlled\nexclusively from the super-project. Ideally, it should be possible to\nmodify duration (and start-point) non-destructively from the\nsuper-project, and the subproject editor UI should indicate which\nportions of its timeline are actually in use in the super-project.)\nShould it be possible to copy a group by reference or only by value?\ni.e. can there exist multiple objects in a timeline that refer to the\nsame subproject? (I think copy-by-reference is too valuable to give up,\nbut careful UI design will be required to avoid creating massive\nconfusion. A unique name for each subproject, displayed in every\nsuperproject timeline-object that references it, might help.)\nIf a group is representable as a single object, then it cannot span\nnon-contiguous layers in the timeline. Specifically, in current video\neditors it is possible to create a group that contains (partially\ntransparent) content at Layer 1 and Layer 3 but none at Layer 2, so that\na timeline object that is not part of the group may be blended between\ntwo objects that are part of the group. (In my view, this behavior is\nnot really desirable, and the simplicity of “a group is a timeline\nobject” is worth the loss of functionality.)\nThe notion of grouping/linking as it was in 0.15 and\nearlier is nonsensical from a user's point of view. More details in bug\n583266.\nAs a user, I want infinite grouping (like in Inkscape), not have to make\na theoretical distinction between linking and grouping.\n\nInfinite clip grouping (vs the old “grouping vs linking” approach)\n“Compound” clips (a more visual form of grouping)\nNested timelines/projects\n\n\nManagement of clips on the timeline canvas\nProject management in general\n\n"});