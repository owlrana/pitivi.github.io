fragment_downloaded_cb({"url": "Plugins.html#the-trac-way", "fragment": "The Trac way \nTrac is an enhanced wiki and issue tracking system for software development projects http trac.edgewall.org it has a consistent pluggable architecture that it strikingly rensembles the one of the Eclipse framework \nThe main application exposes some entry points where plugin can plug into. each entry point is characterized by a contract that both the plugin and the main application must subscrive in order to interact this contract takes the concrete form of an interface declared by the main application and implemented by the plugin. \nEach plugin can implement multiple interfaces in this way it extends multiple aspects of the main application. \nEach entry point can be plugged by multiple plugins thus the same feature of the main application can be extended in multiple ways. \nPlugins can expose entry points themself allowing them to be extended by other plugins. \nTrac plugins inherits from the Component class and are deployed as python eggs. \nThe whole application is designed to be modular and plugins can also be created to replace built in components. \nTechnically the most of the work is done in the core.py file which declares the following structures \nTrac approach intruces a simple implementation for interfaces in python an example code of how this architecture is used for creating plugins is reported in the following example taken from Trac documentation \nfrom trac.core import \nclass ITodoObserver Interface \ndef todo_added name description Called when a to do item is added. \nclass TodoList Component \nobservers ExtensionPoint ITodoObserver \ndef __init__ self self.todos \ndef add self name description assert not name in self.todos To do already in list self.todos name description for observer in self.observers observer.todo_added name description \nclass TodoPrinter Component implements ITodoObserver \ndef todo_added self name description print TODO name print description \nITodoObserver interface provides a todo_added callback to trigger plugin s functionalities. \nThe class TodoList is declared as expandable by declaring an extension point used by plugins that implements the ITodoObserver interface. \nFinally an example plugin TodoPrinter is written that extends the TodoList by implementing the interface ITodoObserver via the implements function. \n"});