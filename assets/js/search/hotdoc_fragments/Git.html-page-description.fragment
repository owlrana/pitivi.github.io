fragment_downloaded_cb({"url":"Git.html#page-description","fragment":"Git is the most popular distributed revision\ncontrol\nsystem. Git\nallows you to get a checkout (with full history) of the Pitivi code, as\na local git repository, and push your changes to a remote repository of\nyour own, to make them available for others.\nIn this page, we cover specifics of how we use Git in the Pitivi\nproject. For an introduction to Git, see the official Git\ntutorial/documentation page and git\nready.\nAs can be seen in the development workflow,\nbest is to create an account on the GNOME GitLab instance and fork\nPitivi there to create\nyour own remote pitivi repository. When you push branches to this\nremote repository, you have the option to create a merge request.\nA GitLab merge request is the same things as a GitHub pull request.\nThis way, the maintainers and other interested parties are notified\nand can review the changes.\nWith rare exceptions, in Pitivi we rebase contributed commits before\npushing them to origin/master, to avoid merge commits. This worked fine\nand it enforces some discipline, so there is no plan to change it.\nWhen working on a issue, assuming you're following the development\nworkflow, you should have a specific branch.\nTo get the latest changes in your branch, normally in Pitivi you should\ndo something like git fetch and git rebase origin/master.\nIt should be safe to use git pull on the master branch, if you don't\nwork on it. Just make sure it's exactly what origin/master is and no\nmerge commit is created.\nIt's much easier to understand what's the status of a git branch by\nusing a graphical tool such as gitk or\ngitg (tailored for GNOME, with a\nreally nice interface).\nMeld can be very useful for reviewing a large\nchange to be committed. Simply run meld . in your local repository.\nSet up your prompt to show the current branch info, and make sure\ntab-completion works.\n"});