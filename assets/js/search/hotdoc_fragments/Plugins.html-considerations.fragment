fragment_downloaded_cb({"url": "Plugins.html#considerations", "fragment": "Considerations \nThese case studies exemplify two different approaches for extending the host application \nIn the first two cases Deluge and Jokosher the host application basically defines a plugin manager that takes care of activating and deactivating plugins when activated the plugin is allowed to access the core objects and modify the application as it wants. \nThis approach has the advantage to leave complete freedom to plugins at the cost of anarchy since there isn t a standardized way for the plugin to interact with the host application. Jokosher tries to overcome this situation by defining some API that can be optionally used by plugins to accomplish common tasks. The other big advantage is that plugins can be created to extend aspect of the application not considered originally by the author to be extendable. \nIn the third case study Trac as opposite plugins can only extend specific aspects of the host application defined as extension points whose declare a clear contract the plugin must subscrive if it wants to extend the host application. \nThis approach enforces a neat definition of rights and duties for the partiecipants to the extension process at the cost of some freedom. In this way plugins do not put their features into the application but offer instead some extended features the application can use. \nThe last case study Zope further improves the concept of interfaces adding the possibility to define attributes constrains inside interfaces providing functions to check interface implementation definition adding a complete facility to provide adapters all this is done in the pythonic way of leaving the developer the most freedom. \nThe main advantage of using interfaces over class inheritance is that the former defines relationships between items and keeps the system higly decoupled while the latter constrains thee partecipants to a gree an is a relationship thus creating strong coupling between classes. \n"});