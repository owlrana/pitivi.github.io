fragment_downloaded_cb({"url": "Bug_reporting.html#page-description", "fragment": "Welcome testers \nTo report a bug problem in the software or request a new feature enhancement create a task and set Projects Pitivi. \nBug reporting and feature requests are managed with Freedesktop s Phabricator. You need to create an account to file tasks and comment on them. Take a look at the existing list of bugs feature requests to see if your problem has already been reported hint use control F in your browser to search \nExample queries \nIn some cases we might ask you to share sample media files with us to debug a particular issue. If you don t have your own hosting space we have a FTP account with unlimited space available for this purpose provided by idmark.ca. \nYou can also share in a similar way a project archive containing the project and all the media is uses \nIn addition to the project archive it is extremely helpful to provide scenario files. These are automatically generated each time you use a project and contain the operations you made. Combined with the project archive these allow us to perform exactly the actions that have occurred to trigger the bug. This makes reproducing the issue on our machines a very easy and reliable process which saves you a ton of time Here s how to provide scenario files to facilitate the process \nWhen reporting a crash or when the application freezed deadlock it would be good to provide a stack trace. \nIf developping pitivi make sure to be in the environment before running \nWhen Pitivi crashes run bt full to get the backtrace. When Pitivi freezes press Ctrl Z and run thread apply all bt to get the backtraces for all the threads. \nSee GNOME s Getting Traces instructions for some comprehensive documentation and tips on the subject. \nFor those of you who already know how to install the relevant debug packages etc we provide you with some simple reminders below of commands that can be particularly useful in Pitivi s context. \nWhen you want to attach to an existing Python process useful for deadlocks where the application will be hung instead of crashed \nWhen you want to run Pitivi entirely in gdb from the start \nWhen Pitivi crashes run bt full to get the backtrace. When Pitivi freezes press Ctrl Z and run thread apply all bt to get the backtraces for all the threads. \nWhen you need to know what s going on inside pitivi you can launch it with a debug level. In loggable.py there are five levels ERROR WARN FIXME INFO DEBUG LOG range As such if you want to see errors and warnings only you launch \nand if you want to see everything you do \nIf that s too much and you want to focus on particular parts of the code you can do so. For example you can get output from the Timeline and MediaLibraryWidget classes only \nHere are various examples of commands you can use to generate detailed debug logs that include not only Pitivi s debug output but also GStreamer s \nA basic log can be obtained by running \nTo get debugging information from Non Linear Engine you could use \nThe information most likely to be useful would probably be the debug info from GES in addition to Pitivi s \nSome additional tips \nIn the rare cases where a performance problem is caused by our UI code you can profile Pitivi itself with this command and yes JUMP_THROUGH_HOOPS is needed for this case it is an environment variable of bin pitivi \nThe resulting pitivi_performance.profile file can then be processed to create a visual representation of where the most time was spent and which functions were called the most often in the code. See also Jeff s blog posts on profiling. \n"});