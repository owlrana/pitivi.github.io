fragment_downloaded_cb({"url": "Bug_reporting.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Bug_reporting.md\">\n<h1 id=\"bug-reporting\">Bug reporting</h1>\n<p>Welcome, testers!</p>\n<p>To report a bug/problem in the software, or request a new\nfeature/enhancement, <a href=\"https://phabricator.freedesktop.org/maniphest/task/edit/form/1/?projects=pitivi\">create a\ntask</a>\nand set Projects: Pitivi.</p>\n<p>Bug reporting and feature requests are managed with Freedesktop's\n<a href=\"https://phabricator.freedesktop.org\">Phabricator</a>. You need to create\nan account to file tasks and comment on them. Take a look at the\n<a href=\"https://phabricator.freedesktop.org/tag/pitivi/\">existing list of bugs/feature\nrequests</a> to see if\nyour problem has already been reported <em>(hint: use control+F in your\nbrowser to search!)</em>.</p>\n<p>Example queries:</p>\n<ul>\n<li><a href=\"https://phabricator.freedesktop.org/tag/pitivi/\">Everything</a> - All\nthe tasks (bug reports and feature requests).</li>\n<li><a href=\"https://phabricator.freedesktop.org/differential/query/8RA8XgY0ogT3/\">Patches</a>\n\u2014 All the patches (diffs) attached to tasks that have not yet been\nmerged.</li>\n<li><a href=\"https://phabricator.freedesktop.org/project/view/111/\">Pitivi tasks for\nnewcomers</a> \u2014\nfeature requests and some small bugs that are considered easier for\nnew contributors to tackle.</li>\n</ul>\n<h1 id=\"providing-debugging-information\">Providing debugging information</h1>\n<h2 id=\"sharing-sample-files-projects-and-scenarios\">Sharing sample files, projects, and \u201cscenarios\u201d</h2>\n<p>In some cases we might ask you to share <strong>sample media files</strong> with us\nto debug a particular issue. If you don't have your own hosting space,\nwe have a FTP account with unlimited space available for this purpose,\nprovided by <a href=\"http://idmark.ca\">idmark.ca</a>.</p>\n<ol>\n<li>Using a FTP client (such as FileZilla, available on most Linux\ndistributions), connect to \u201cidmark.ca\u201d using the username\n\u201cpitivisamples@idmark.ca\u201d (@idmark.ca is part of the username). Ask\n<a href=\"The_people.html\">us</a> for the password on IRC.</li>\n<li>Please follow our simple naming convention and put your files in a\nfolder called with the ID of the bug report (eg. T3553) so we can\nfind it easily.</li>\n<li>Your uploaded files will be in a private staging folder (only\nvisible through FTP); once reviewed, we may move your uploaded files\nto <a href=\"http://pitivi.ecchi.ca/user-contributed-samples/\">http://pitivi.ecchi.ca/user-contributed-samples/</a> for ease of\naccess.</li>\n</ol>\n<p>You can also share in a similar way a <strong>project archive</strong> containing the\nproject and all the media is uses:</p>\n<ol>\n<li>Use the \u201cSelect unused clips\u201d feature to easily remove unused media\nfrom your project, this will help you save space (and upload time).</li>\n<li>Click the menu button top-right and choose the \u201cExport project as\ntarball...\u201d menu item. Save the .xges_tar file somewhere. It will\ncontain your project file and its associated media.</li>\n<li>Upload it as described above.</li>\n</ol>\n<p>In addition to the project archive, it is extremely helpful to provide\n<strong>\u201cscenario\u201d files</strong>. These are automatically generated each time you\nuse a project and contain the operations you made. Combined with the\nproject archive, these allow us to perform exactly the actions that have\noccurred to trigger the bug. This makes reproducing the issue on our\nmachines a very easy and reliable process, which saves you a ton of\ntime! Here's <strong>how to provide scenario files to facilitate the\nprocess:</strong></p>\n<ol>\n<li>Save your project, right before triggering the bug.</li>\n<li>Trigger the bug (make Pitivi crash or freeze).</li>\n<li>Get the last/newest scenario file from <code>~/.cache/pitivi/scenarios/</code>\nor <code>~/.var/app/org.pitivi.Pitivi/cache/pitivi/scenarios/</code></li>\n<li>Upload it as described above, so we can reproduce your issue and\nintegrate it into our test suite so that it does not happen again in\nthe future!</li>\n</ol>\n<h2 id=\"stack-traces-for-crashes\">Stack traces for crashes</h2>\n<p>When reporting a <strong>crash</strong> or when the application freezed <strong>deadlock</strong>,\nit would be good to provide a <strong>stack trace</strong>.</p>\n<h3 id=\"when-running-with-flatpak\">When running with Flatpak</h3>\n<p>Make sure you have the GNOME Sdk and Debug symbols installed:</p>\n<pre><code>GNOME_REPO=$(flatpak remote-list --user -d | grep \"http://sdk.gnome.org/repo/\" | awk '{ print $1 }') &amp;&amp; \\\nflatpak install --user $GNOME_REPO org.gnome.Sdk 3.20; \\\nflatpak install --user $GNOME_REPO org.gnome.Sdk.Debug 3.20; \\\nflatpak install --user $GNOME_REPO org.gnome.Sdk 3.22; \\\nflatpak install --user $GNOME_REPO org.gnome.Sdk.Debug 3.22\n</code></pre>\n<p>Start a shell in the Pitivi bundle environment</p>\n<pre><code>flatpak run -d --command=bash org.pitivi.Pitivi\n</code></pre>\n<p>Start Pitivi inside gdb</p>\n<pre><code>gdb python3 -ex 'run /app/bin/pitivi\n</code></pre>\n<p>When Pitivi crashes, run <code>bt full</code> to get the backtrace. When Pitivi\nfreezes, press Ctrl+Z and run <code>thread apply all bt</code> to get the\nbacktraces for all the threads.</p>\n<h3 id=\"when-running-from-the-packages-of-your-linux-distro\">When running from the packages of your Linux distro</h3>\n<p>See GNOME's <a href=\"https://wiki.gnome.org/Community/GettingInTouch/Bugzilla/GettingTraces\">Getting\nTraces</a>\ninstructions for some comprehensive documentation and tips on the\nsubject.</p>\n<p>For those of you who already know how to install the relevant debug\npackages etc, we provide you with some simple reminders below of\ncommands that can be particularly useful in Pitivi's context.</p>\n<p>When you want to \u201cattach\u201d to an existing Python process (useful for\ndeadlocks, where the application will be hung instead of crashed):</p>\n<pre><code>gdb python3 THE_PITIVI_PROCESS_NUMBER\n</code></pre>\n<p>When you want to run Pitivi entirely in gdb from the start:</p>\n<pre><code>gdb python3 $(which pitivi)\nset pagination 0  # avoids the need to press Enter to \u201cscroll\u201d\nrun\n</code></pre>\n<p>When Pitivi crashes, run <code>bt full</code> to get the backtrace. When Pitivi\nfreezes, press Ctrl+Z and run <code>thread apply all bt</code> to get the\nbacktraces for all the threads.</p>\n<h2 id=\"debug-logs\">Debug logs</h2>\n<p>When you need to know what\u2019s going on inside pitivi, you can launch it\nwith a debug level. In\n<a href=\"https://git.gnome.org/browse/pitivi/tree/pitivi/utils/loggable.py#n50\">loggable.py</a>,\nthere are five levels: ( <span style=\"color:red;\">ERROR</span>,\n<span style=\"color:yellow; background-color:gray;\">WARN</span>,\n<span style=\"color:magenta;\">FIXME</span>,\n<span style=\"color:green;\">INFO</span>,\n<span style=\"color:blue;\">DEBUG</span>,\n<span style=\"color:cyan;\">LOG</span> ) = range(1, 7). As such, if you\nwant to see errors and warnings only, you launch</p>\n<pre><code>PITIVI_DEBUG=2 bin/pitivi\n</code></pre>\n<p>...and if you want to see everything you do</p>\n<pre><code>PITIVI_DEBUG=6 bin/pitivi\n</code></pre>\n<p>If that's \u201ctoo much\u201d and you want to focus on particular parts of the\ncode, you can do so. For example, you can get output from the <code>Timeline</code>\nand <code>MediaLibraryWidget</code> classes only:</p>\n<pre><code>PITIVI_DEBUG=timeline:6,medialibrarywidget:6 bin/pitivi\n</code></pre>\n<p>Here are various examples of commands you can use to generate detailed\ndebug logs that include not only Pitivi's debug output, but also\nGStreamer's:</p>\n<p>A basic log can be obtained by running:</p>\n<pre><code>PITIVI_DEBUG=*:5 GST_DEBUG=2 bin/pitivi &gt; debug.log 2&gt;&amp;1\n</code></pre>\n<p>To get debugging information from Non-Linear Engine, you could use:</p>\n<pre><code>PITIVI_DEBUG=5 GST_DEBUG=3,nle*:5,python:5 bin/pitivi &gt; debug.log 2&gt;&amp;1\n</code></pre>\n<p>The information most likely to be useful would probably be the debug\ninfo from <a href=\"GES.html\">GES</a> in addition to Pitivi's:</p>\n<pre><code>PITIVI_DEBUG=5 GST_DEBUG=ges:5 bin/pitivi &gt; debug.log 2&gt;&amp;1;\n</code></pre>\n<p>Some additional tips:</p>\n<ul>\n<li>When using GST_DEBUG, the resulting logs will most likely be too\nbig to be attached to a bug report directly. Instead, compress them\n(in gzip, bzip2 or lzma format) before attaching them to a bug\nreport.</li>\n</ul>\n<h1 id=\"python-performance-profiling\">Python performance profiling</h1>\n<p>In the rare cases where a performance problem is caused by our UI code,\nyou can profile Pitivi itself, with this command (and yes,\n<code>JUMP_THROUGH_HOOPS</code> is needed for this case, it is an environment\nvariable of\n<a href=\"https://git.gnome.org/browse/pitivi/tree/bin/pitivi.in\">bin/pitivi</a>:</p>\n<pre><code>JUMP_THROUGH_HOOPS=1 python3 -m cProfile -s time -o pitivi_performance.profile bin/pitivi\n</code></pre>\n<p>The resulting <code>pitivi_performance.profile</code> file can then be processed\nto create a visual representation of where the most time was spent and\nwhich functions were called the most often in the code. See also <a href=\"http://jeff.ecchi.ca/blog/tag/profiling/\">Jeff's\nblog posts on profiling</a>.</p>\n\n</div>\n\n\n        "});