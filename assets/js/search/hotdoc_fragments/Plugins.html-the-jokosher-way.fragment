fragment_downloaded_cb({"url": "Plugins.html#the-jokosher-way", "fragment": "The Jokosher way \nJokosher is an audio production software that uses python gtk gstreamer http www.jokosher.org \nIts pluggable architecture places plugins into the extensions directory. Plugins can be stored as source py files or packed into python eggs. \nExtension API are provided for inserting menu items inside the main jokosher menu as well as functions to control playback instruments and to add new output formats. \nPlugin preferences are stored in the extension config path with one config file for each plugin named as the plugin itself. Preferences are serialized by pickle into a dictionary of objects standard methods to store and retrieve keys from the dictionary are available to the plugin writer. \nThe plugin manager install remove plugins taking care of possible conflicts it also manages the loading unloading configuration processes for each plugin ensuring each plugin is loaded only once plugins are treated as singletons \nEach plugin must contain \nThis approach defines a clear set of API that the plugin can use as preferred way to interact with the main application API are pushed into the plugin when it is activated and a reference to them is usually kept inside the plugin though all its lifetime. \nAPI for UI integration allow to insert new menu items leaving to the plugin the responsability to remove the inserted items when it is unloaded. The same logic is applied when additional output formats are provided by the plugin those must be removed from available output format by the plugin itself when it is deactivated. \nStrength points of the Jokosher approach are a well designed and lightweight plugin manager the possiblity to store plugins in python eggs that simplifies a lot the deployment of new plugins a clean set of API the plugin can use to interact with the host application the possibility to add new output formats the possibility to save plugin s preferences without having the plugin care about serialization procedures. \nWeak points of this architecture are a limited UI integration beccause plugins wich uses only the API can insert menu items only under the plugin submenu the creation of a preferences file for each plugin available could lead to a pollution of config files leaving to plugins the duty of removing UI enhancements they inserted could lead to waste of memory if the plugin writer does not make a good job a defaulf approach for cleaning would be preferrable. \n"});