fragment_downloaded_cb({"url": "HACKING.html#page-description", "fragment": "The easy way to setup the development environment is to follow the GNOME Newcomers guide. \nMake sure to use the right git repository \nhttps gitlab.gnome.org GNOME pitivi.git \nNOTE This way of setting the development environment is sensibly more complex but also more flexible than the one for newcomers. If you are a beginner or if you usually use gnome builder as your main IDE follow as previously advised the GNOME Newcomers guide \nThe official way of getting your environment up and running is by using flatpak. For this you need to install flatpak on your system along with flatpak builder. Note flatpak builder might be provided by an additional package on some distributions such as Archlinux \nCreate a development environment folder and get the Pitivi source code into it \nWhenever you want to hack on Pitivi enter the development environment \nThis can take a while when creating the sandbox from scratch. Note the prompt changes \nBy entering the development environment you get \nNow that you are in the development environment try running the unittests \nHack away and check the effect of your changes by simply running \nTo update the dependencies installed in the sandbox run \nThat will actually recreate the sandbox prefix updating all dependencies from their git repos and tarballs as defined in the flatpak manifest located at build flatpak pitivi.template.json \nThe sandbox we set up has access to the host file system. This allows running the Python modules in pitivi dev pitivi pitivi on top of the GNOME Pitivi dependencies system installed in the sandbox. Without this trick you d have to build and install every time when you change a py file to be able to test how it works which would be annoying because it takes a non negligible amount of time. \nWe don t actually run Pitivi uninstalled. Besides the py files there are other parts which need to be built when changed or even installed before using them \nSelect parts of Pitivi are written in C such as the audio envelope renderer for the audio clips. Build them with ninja C mesonbuild or with our very own alias build which is the same thing. No need to install them. \nSimilarly bin pitivi.py.in and pitivi configure.py.in also need to be built with build to regenerate the corresponding py files. \nThe translations need to be built and installed which can be done with binstall. See Switching locales below. \nIf you have to work on say GStreamer Editing Services which is built using the Meson build system first clone it into your pitivi dev folder \nPrepare its build directory. Once it has been set up you won t have to run meson again for this build directory. \nBuild and install it in the sandbox \nIn the ptv flatpak development environment meson and ninja are aliases which run meson and ninja in the flatpak sandbox. \nNOTE When updating the environment with ptvenv update it will use your local dependencies repositories it finds in the pitivi dev folder instead of the default remote repositories. This means you have to update them yourself. Also beware that it will not take into account not committed changes. \nIf the project you are working on is built with other tools make sure they are run in the sandbox by using ptvenv. For example \nTo profile a Pitivi run simply set the PITIVI_PROFILING environment variable to like so \nA file named pitivi runstats will be created in the current directory a handy tool to examine it is gprof2dot.py install it with \nThen run \nYou can then inspect the call tree profile with your preferred image viewer \nTo see how Pitivi looks in a different locale use \nPay attention the translations in the sandbox are not automatically updated when you git pull. You can update them by updating your sandbox ptvenv update or by reinstalling Pitivi in the sandbox \n"});