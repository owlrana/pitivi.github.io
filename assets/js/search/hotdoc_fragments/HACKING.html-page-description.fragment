fragment_downloaded_cb({"url":"HACKING.html#page-description","fragment":"There are two ways to set up a flatpak sandbox with all the\ndependencies required to run and develop Pitivi. We recommend\nthe advanced way, but if you want something quick, go ahead with\nthe easy way.\nThe easy way to setup the development environment is to follow the\nGNOME Newcomers guide.\nThis implies using GNOME Builder to manage the dependencies sandbox.\nClone the https://gitlab.gnome.org/GNOME/pitivi.git git repository\nin GNOME Builder.\nTo run the unittests, click in Builder: Unittests > pitivi > Pitivi unit tests.\nMake sure they all pass, or tell us about any failures.\nTo be able to use our pre-commit git hook, run:\nWhen creating commits, for the pre-commit git hook to work properly\nit has to run in the sandbox. This is possible only by running git\nin a Build Terminal in GNOME Builder. You might want to\nexport EDITOR=nano if you get \"error: unable to start editor 'vi'\"\nwhen you have to enter a commit message.\nNOTE: This way of setting the development environment is sensibly more complex\nbut also more flexible than the one for newcomers. If you are a  beginner\nor if you usually use GNOME Builder\nas your main IDE, follow, as previously advised, the\nGNOME Newcomers guide\nThe official way of getting your environment up and running is by using\nflatpak. For this you need to\ninstall flatpak on your system,\nalong with flatpak-builder. Note flatpak-builder might be provided by an\nadditional package on some distributions (such as Archlinux).\nCreate a development environment folder and get the Pitivi source code into it:\nWhenever you want to hack on Pitivi, enter the development environment:\nThis can take a while when creating the sandbox from scratch. Note the\nprompt changes:\nBy entering the development environment, you get:\nNow that you are in the development environment, try running the\nunittests:\nHack away, and check the effect of your changes by simply running:\nTo update the dependencies installed in the sandbox, run:\nThat will actually recreate the sandbox prefix, updating all\ndependencies from their git repos and tarballs as defined in the\nflatpak\nmanifest.\nThe sandbox we set up has access to the host file system. This allows\nrunning the Python modules in pitivi-dev/pitivi/pitivi/... on top of\nthe GNOME + Pitivi dependencies system installed in the sandbox.\nWithout this trick, you'd have to build and install every time when you\nchange a .py file, to be able to test how it works, which would be\nannoying because it takes a non-negligible amount of time.\nWe don't actually run Pitivi 100% uninstalled. Besides the .py files\nthere are other parts which need to be built when changed or even\ninstalled before using them:\nSelect parts of Pitivi are written in C, such as the audio envelope\nrenderer for the audio clips. Build them with ninja -C mesonbuild/ or\nwith our very own alias build, which is the same thing. No need to\ninstall them.\nSimilarly, bin/pitivi.py.in and pitivi/configure.py.in also need\nto be built with build, to regenerate the corresponding .py files.\nThe translations need to be built and installed, which can be done\nwith binstall. See \"Switching locales\" below.\nIf you have to work on say, GStreamer Editing Services\nwhich is built using the Meson build system, first clone it into your\npitivi-dev folder:\nPrepare its build directory (Once it has been set up, you won't have to\nrun meson again for this build directory):\nBuild and install it in the sandbox:\nIn the (ptv-flatpak) development environment meson and ninja are\naliases which run meson and ninja in the flatpak sandbox.\nNOTE: When updating the environment with ptvenv --update,\nit will use your local dependencies repositories it finds in the\npitivi-dev folder, instead of the default remote repositories.\nThis means you have to update them yourself.\nAlso beware that it will not take into account not committed\nchanges.\nIf the project you are working on is built with other tools, make sure\nthey are run in the sandbox by using ptvenv. For example:\nTo profile a Pitivi run, simply set the PITIVI_PROFILING environment\nvariable to 1, like so:\nA file named pitivi-runstats will be created in the current directory, a handy tool to examine it is gprof2dot.py, install it with:\nThen run:\nYou can then inspect the call tree profile with your preferred image viewer:\nTo see how Pitivi looks in a different locale, use:\nPay attention the translations in the sandbox are not automatically\nupdated when you git pull. You can update them by updating your\nsandbox (ptvenv --update) or by reinstalling Pitivi in the sandbox:\n\na Flatpak sandbox\nfor the dependencies, in pitivi-dev/pitivi-prefix\n\na Python virtual environment\nwith development tools, such as\npre-commit,\nin pitivi-dev/pitivi/build/flatpak/pyvenv\n\nthe Meson build directory,\nin pitivi-dev/pitivi/mesonbuild\n\nsome aliases for the build tools, such as ninja, so they are executed in the sandbox.\n\n\n\nSelect parts of Pitivi are written in C, such as the audio envelope\nrenderer for the audio clips. Build them with ninja -C mesonbuild/ or\nwith our very own alias build, which is the same thing. No need to\ninstall them.\n\n\nSimilarly, bin/pitivi.py.in and pitivi/configure.py.in also need\nto be built with build, to regenerate the corresponding .py files.\n\n\nThe translations need to be built and installed, which can be done\nwith binstall. See \"Switching locales\" below.\n\n\n"});