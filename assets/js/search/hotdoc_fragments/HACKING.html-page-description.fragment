fragment_downloaded_cb({"url": "HACKING.html#page-description", "fragment": "The official way of getting your environment up and running is by using flatpak. For this you need to install flatpak on your system along with flatpak builder which might be provided by an additional package on some distributions please tell us if it is the case for yours so we can make a list here \nCreate a development environment folder and get the Pitivi source code into it \nWhen you hack on Pitivi enter the development environment to get \nNote This can take a while when creating the sandbox from scratch. \nRun the unittests \nHack away and check the effect of you changes by simply running \nWe use Phabricator tasks to track all bugs and feature requests feel free to open a task if you have found a bug or wish to see a feature implemented if it doesn t exist already. You can even subscribe to tasks on Phabricator to keep yourself updated with their progress. If you re a newcomer wanting to contribute you can start with tasks tagged Pitivi tasks for newcomers to get involved. \nTo fix a task it s best to get in touch with us on our IRC channel pitivi on Freenode to see if it s still meaningful then if all is well \nAssign the task to yourself in Phabricator. \nCreate a new branch with a relevant name. Make sure to set its remote tracking branch as it determines the default commit range to attach. For example if you re going to work on task T7674 the branch could be called T7674 import img or T7674 fix import i.e. git checkout b T7674 import img origin master. \nOnce you have made your changes you need to create a commit. Follow the GNOME guidelines for creating commits. \nBe aware that when you create a commit pre commit is executed to perform checks on the changes and in some cases it does some automatic fixes. When this happens make sure those are included in the commit you want to create. \nNow you re all set to push your first diff to Phabricator for review \nOptionally you can set git phab to automatically push your WIP branches to a personal remote repository \nAdd your cloned remote Pitivi repository as a remote to your local repository \nSet git phab remote to your cloned remote Pitivi repository \nSelect parts of Pitivi are written in C and need to be built when changed such as the audio envelope renderer for the audio clips. Build them with \nTo update the dependencies installed in the sandbox run \nThat will actually recreate the prefix update all dependencies from their git repos and tarballs as defined in the flatpak manifest located at build flatpak pitivi.template.json \nIf you have to work on say GStreamer Editing Services which is built using the Meson build system first clone it into your pitivi dev folder \nPrepare its build directory. Once it has been set up you won t have to run meson again for this build directory. \nBuild and install it in the sandbox \nIn the ptv flatpak development environment meson and ninja are aliases which run meson and ninja in the flatpak sandbox. \nNOTE When updating the environment with ptvenv update it will use your local dependencies repositories it finds in the pitivi dev folder instead of the default remote repositories. This means you have to update them yourself. Also beware that it will not take into account not committed changes. \nIf the project you are working on is built with other tools make sure they are run in the sandbox by using ptvenv. For example \nWe rely on the Python Style Guide PEP \nThe only exception to it is regarding the columns rule. Since Python is a very concise compact language we can afford to be a little bit more flexible on the line length than languages such as C. \nWhen deciding whether or not you should split your line when it exceeds characters ask yourself Does it truly improve legibility \nWhat this translates to is \nAvoid having very long lines. \nWhen the contents only slightly exceeds the chars limit consider keeping it on one line. Otherwise it just hurts legibility and gives a weird shape to the code. \nThe function names method names and other class attributes should be small_caps_with_underscore. For example \nTo illustrate how private a method or other class field is prepend one or two underscores \nUnused arguments in methods should be prefixed with unused_. The most common place where this would happen is in callbacks from gobject signals. For example below we don t use the second argument but we do use pad. \nThe name of a callback method should \nYou can guess the order of the imported modules by looking at some py files. The pre commit hook has authority in this case as it will reorder the imports if the order is not good. \nTo profile a pitivi run simply set the PITIVI_PROFILING environment variable to like so \nA file named pitivi runstats will be created in the current directory a handy tool to examine it is gprof2dot.py install it with \nThen run \nYou can then inspect the call tree profile with your preferred image viewer \n"});