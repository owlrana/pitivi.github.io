fragment_downloaded_cb({"url": "HACKING.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"HACKING.md\">\n<h1 id=\"hacking-on-pitivi\">Hacking on Pitivi</h1>\n<h2 id=\"the-pitivi-development-environment\">The Pitivi development environment</h2>\n<h3 id=\"setup-pitivi\">Setup Pitivi</h3>\n<p>The official way of getting your environment up and running is by using\n<a href=\"http://flatpak.org/\">flatpak</a>.</p>\n<p>You first need to <a href=\"http://flatpak.org/getting.html\">get flatpak</a>\nmaking sure you also install flatpak-builder, which might be provided by an\nadditional package on some distributions (please tell us if it is the case\nfor yours so we can make a list here).</p>\n<p>Create a development environment folder and get the <a href=\"https://git.gnome.org/browse/pitivi/tree/\">Pitivi source code</a> into it:</p>\n<pre><code>$ mkdir pitivi-dev &amp;&amp; cd pitivi-dev\n$ git clone https://git.gnome.org/browse/pitivi\n$ cd pitivi/\n</code></pre>\n<p>Finally to enter the dev env you just need to run:</p>\n<pre><code>$ source bin/pitivi-env\n</code></pre>\n<p>Run <code>pitivi</code> while inside the environment to launch Pitivi. Next you should run the unittests.</p>\n<pre><code>(ptv-flatpak) $ pitivi\n(ptv-flatpak) $ make check\n</code></pre>\n<p>After you hack the source code simply run <code>pitivi</code> again to see how your changes work.</p>\n<h3 id=\"development-workflow\">Development Workflow</h3>\n<p>We use <a href=\"https://phabricator.freedesktop.org/tag/pitivi/\">Phabricator tasks</a> to track all bugs and feature requests; feel free to open a task if you have found a bug or\nwish to see a feature implemented if it doesn't exist already.\nYou can even subscribe to tasks on Phabricator to keep yourself updated with their progress.\nIf you're a newcomer wanting to contribute, you can start with tasks tagged <a href=\"https://phabricator.freedesktop.org/tag/pitivi_tasks_for_newcomers/\">Pitivi tasks for newcomers</a> to get involved.</p>\n<p>To fix a task, it's best to get in touch with us on our IRC channel <code>#pitivi</code> on Freenode, to see if it's still meaningful, then if all is well:</p>\n<ol>\n<li>\n<p>Assign the task to yourself in Phabricator.</p>\n</li>\n<li>\n<p>Create a new branch with a meaningful name. Make sure to set its <a href=\"https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches/\">remote-tracking branch</a>, as it determines the default commit range to attach.\nFor example, if you're going to work on task <a href=\"https://phabricator.freedesktop.org/T7674/\">T7674</a>, the branch could be called T7674-import-img or\nT7674-fix-import, i.e. <code>git checkout -b T7674-import-img origin/master</code>.</p>\n</li>\n<li>\n<p>Once you have made your changes, you need to create a commit. Follow the <a href=\"https://wiki.gnome.org/Newcomers/CodeContributionWorkflow#Commit_guidelines\">GNOME guidelines</a>\nfor creating commits.</p>\n<p>Be aware that when you create a commit, <code>pre-commit</code> is executed to perform checks on the changes and in some cases it does\nsome automatic fixes. When this happens, make sure those are included in the commit you want to create.</p>\n</li>\n<li>\n<p>Now you're all set to push your first diff!</p>\n<pre><code>$ git-phab attach --task TXXXX\n</code></pre>\n</li>\n</ol>\n<p>Optionally, you can set git-phab to automatically push your WIP branches to a personal remote repository:</p>\n<ol>\n<li>\n<p>Add your cloned remote Pitivi repository as a remote to your local repository:</p>\n<pre><code>$ git remote add github https://github.com/NICK/pitivi.git\n$ git remote set-url github https://github.com/NICK/pitivi.git\n$ git remote set-url --push github git@github.com:NICK/pitivi.git\n$ git remote show github | grep URL\n  Fetch URL: https://github.com/NICK/pitivi.git\n  Push  URL: git@github.com:NICK/pitivi.git\n</code></pre>\n</li>\n<li>\n<p>Set git-phab remote to your cloned remote Pitivi repository:</p>\n<pre><code>$ git config phab.remote github\n</code></pre>\n</li>\n</ol>\n<h3 id=\"update-the-environment\">Update the environment</h3>\n<p>To update the dependencies installed in the dev env run:</p>\n<pre><code>(ptv-flatpak) $ ptvenv --update\n</code></pre>\n<p>That will actually clean the prefix, update all dependencies from their\ngit repos and tarballs as defined in the <a href=\"https://git.gnome.org/browse/pitivi/tree/build/flatpak/pitivi.template.json\">flatpak manifest</a> (located\nat build/flatpak/pitivi.template.json)</p>\n<h3 id=\"work-on-some-pitivi-dependencies-in-the-development-environment\">Work on some Pitivi dependencies in the development environment</h3>\n<p>If you have to work on say, <a href=\"https://gstreamer.freedesktop.org/modules/gst-editing-services.html\">GStreamer Editing Services</a>\nyou can clone it into your <code>pitivi-dev</code> folder:</p>\n<pre><code>(ptv-flatpak) $ git clone git://anongit.freedesktop.org/gstreamer/gst-editing-services\n</code></pre>\n<p>Install it in the sandbox by running in the dev env:</p>\n<pre><code>(ptv-flatpak) $ autogen\n(ptv-flatpak) $ make install\n</code></pre>\n<p><code>autogen</code> is an alias which runs <code>./autogen.sh</code> with the right arguments\nfor the flatpak sandbox.\n<code>make</code> is also an alias which runs the real <code>make</code> inside the sandbox,\nthus <code>make install</code> will install your changes in the sandbox.</p>\n<p>NOTE: When updating the environment, it will use your\nlocal dependencies repositories instead of remote\nrepositories, which means you have to update them yourself.\nAlso beware that it will not take into account not committed\nchanges.</p>\n<h2 id=\"coding-style-guide\">Coding Style Guide</h2>\n<p>We rely on the <a href=\"https://www.python.org/dev/peps/pep-0008/\">Python Style Guide PEP-8</a></p>\n<p>The only exception to it is regarding the \"80 columns\" rule.\nSince Python is a very concise/compact language, we can afford to be\na little bit more flexible on the line length than languages such as C.</p>\n<p>When deciding whether or not you should split your line when it exceeds\n79 characters, ask yourself: \"Does it truly improve legibility?\"</p>\n<p>What this translates to is:</p>\n<ul>\n<li>\n<p>Avoid having very long lines.</p>\n</li>\n<li>\n<p>When the contents only slightly exceeds the 80 chars limit,\nconsider keeping it on one line. Otherwise it just hurts legibility and\ngives a weird \"shape\" to the code.</p>\n</li>\n</ul>\n<h3 id=\"names\">Names</h3>\n<p>The function names, method names and other class attributes should be\nsmall_caps_with_underscore. For example:</p>\n<pre><code class=\"language-python\">def some_function():\n    return \"\"\n\nclass MyClass:\n\n    def a_really_important_method(self):\n        self.do_something()\n\n    @property\n    def water_level(self):\n        \"\"\"The level of the water in meters.\"\"\"\n        return self.__water_level\n</code></pre>\n<p>To illustrate how private a method or other class field is, prepend\none or two underscores:</p>\n<pre><code class=\"language-python\">  class MyClass:\n\n     def public_method(self):\n         ...\n\n     def _protected_method(self):\n         ...\n\n     def __private_method(self):\n         ...\n</code></pre>\n<p>Unused arguments in methods should be prefixed with <code>unused_</code>.\nThe most common place where this would happen is in callbacks from\ngobject signals. For example, below we don't use the second argument,\nbut we do use <code>pad</code>.</p>\n<pre><code class=\"language-python\">     def __pad_added_cb(self, unused_element, pad):\n        self.do_something_with(pad)\n</code></pre>\n<p>The name of a callback method should:</p>\n<ul>\n<li>be prepended with two underscores since it's private</li>\n<li>be appended with <code>cb</code></li>\n</ul>\n<pre><code class=\"language-python\">  class MyClass:\n\n     def some_method(self):\n         self.someobject.connect('event', self.__some_object_event_cb)\n\n     def __some_object_event_cb(self, object, arg):\n         print \"our callback was called\"\n</code></pre>\n<h3 id=\"imports-order\">Imports order</h3>\n<p>You can guess the order of the imported modules by looking at some py files.\nThe pre-commit hook has authority in this case as it will reorder the imports\nif the order is not good.</p>\n\n</div>\n\n\n\t"});