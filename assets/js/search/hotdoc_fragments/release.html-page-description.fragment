fragment_downloaded_cb({"url":"release.html#page-description","fragment":"Ideally these instructions are in line with the GNOME releasing process.\nWe make two types of releases:\nThe regular releases have the version number X.YY, and the bug-fix\nreleases have the version number X.YY.Z, where Z is hopefully a relatively small\nnumber (1, 2, 3...).\nMost of the steps below should be done in the development environment: $ source bin/pitivi-env -> (ptv-flatpak) $\nCheck GitLab\nCheck your local dev env:\nUpdate the following files:\nCommit the changes: $ git commit -a -m \"Release <version-number>\"\nCreate the distribution archive:\nOn an X system, ninja dist might not work because the unit tests fail because of X. In this case, stop X and use a fake X server: xvfb-run ninja -C mesonbuild/ dist.\nInstall it on a real system and give it a spin. For example on Archlinux:\nCreate a tag and push it to the official repository. The TAG must always include the micro. This means when doing a regular release with version number X.YY, the TAG is X.YY.0. When doing a bug-fix release, the version number already includes a micro, so it's all fine.\nWe use tag X.YY.0 instead of X.YY because we want to have the option of later creating the X.YY branch to the official repository, since it's not possible to have both a tag and a branch with the same name. This branch would gather backported fixes and be used for doing future X.YY.Z bug-fix releases.\nPublish the archive on Gnome:\nThe tarball will appear on https://download.gnome.org/sources/pitivi/X.YY/pitivi-X.YY.Z.tar.xz\nSpread the word about the release\nUpdate http://www.pitivi.org/releases.txt for the app's update notification feature\nBump the Z in the version number in meson.build, for example if it was a regular release: 0.98 -> 0.98.1 or if it was a bug-fix release: 0.97.1 -> 0.97.2, and $ commit -a -m \"Back to development\"\n\nregular releases, when we have new features or improvements, and\n\"smaller\" bug-fix releases, when a regular release needs patching.\n\n\nMake sure there are no significant issues open against the current milestone.\nMove the remaining open issues somewhere else, for example to the next milestone.\nClose the current milestone.\n\n\nMake sure your sandbox is using the latest GStreamer release: $ ptvenv --update\n\nCheck $ git status does not show any change\n\n\n\nmeson.build:\nIf doing a bugfix release, add or increase the micro.\nIf doing a regular release, bump YY up and remove the micro from\nthe version number, for example: 0.97.1 -> 0.98. Normally this is the\nsame as the name of the Phabricator milestone you just archived.\n\ndata/org.pitivi.Pitivi.appdata.xml.in:\nAdd a new release tag with the exec summary of changes.\n\nNEWS:\nCopy the exec summary of changes also here. This ends up in the .news file at download.gnome.org/sources/pitivi.\n\nAUTHORS:\nIf there are new maintainers.\n\n\nSend an email to gstreamer-devel@lists.freedesktop.org\nSend an email to gnome-i18n@gnome.org thanking translators.\n\nArchlinux, click \"Flag Package Out-of-Date\".\n\nDebian, click the \"unstable\" Debian version and look for \"maintainer\".\n\nFedora, look for Point of Contact.\n\n"});