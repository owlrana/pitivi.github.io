fragment_downloaded_cb({"url": "release.html#page-description", "fragment": "Ideally these instructions are in line with the GNOME releasing process. \nWe make two types of releases \nThe regular releases have the version number X.YY and the bug fix releases have the version number X.YY.Z where Z is hopefully a relatively small number \nMost of the steps below should be done in the development environment source bin pitivi env ptv flatpak \nCheck GitLab \nMake sure we depend on the latest GStreamer. This should be done as soon as GStreamer makes a release. \nCheck your local repository \nMake sure the tests pass \nUpdate the following files \nCommit the changes git commit a m Release version number \nCreate the distribution archive \nInstall it on a real system and give it a spin. For example on Archlinux \nCreate a tag and push it to the official repository. The TAG must always include the micro. This means when doing a regular release with version number X.YY the TAG is X.YY.0. When doing a bug fix release the version number already includes a micro so it s all fine. \nWe use tag X.YY.0 instead of X.YY because we want to have the option of later creating the X.YY branch to the official repository since it s not possible to have both a tag and a branch with the same name. This branch would gather backported fixes and be used for doing future X.YY.Z bug fix releases. \nPublish the archive on Gnome \nThe tarball will appear on https download.gnome.org sources pitivi X.YY pitivi X.YY.Z.tar.xz \nSend out an announcement mail to \nOn pitivi.org update releases.txt for the app s update notification feature \nBump the Z in the version number in meson.build for example if it was a regular release or if it was a bug fix release and commit a m Back to development \n"});