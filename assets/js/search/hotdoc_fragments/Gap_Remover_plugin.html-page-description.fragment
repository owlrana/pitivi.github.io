fragment_downloaded_cb({"url": "Gap_Remover_plugin.html#page-description", "fragment": "In the previous tutorial you have seen how to create a simple plugin such way it can be recognized and listed by the Pitivi Plugin Manager. In this section you will see how to write plugins that modifies the Timeline behavior. \nWe are going to create a plugin for learning purposes that removes gap between clips. The plugin will add a button in the Pitivi Timeline toolbar. So when we select a bunch of clips and click that button clips will be positioned together. \n\nAs we mentioned in the previous tutorial you have to create a plugin description file. So create a file named gap remover.plugin with the following content \nFor a complete example of a plugin description file see PeasPluginInfo documentation. \nIn this step we will add a button to the timeline s toolbar. \nThe do_activate method is executed everytime we enable or turn on the switch in the Pitivi Plugin Manager of that plugin There we are adding a new button that for the moment does not do anything. When we turn off the plugin s switch do_deactivate is called. Here we need to tell Pitivi that we want to remove the added button. \nWe have a button but it does not do anything. In order to get this button to perform some action we need to connect it to a signal. We achieve this with this following line \nself.remove_gap_button.connect clicked self.__remove_gaps_cb \nOf course we need to add a new method __remove_gaps_cb to our class. It would look like this \nFirst we get the current selected clips and sort them by the time they start at. Once we have the selection we shouldn t start to change the position in the timeline of the clips. We need to be sure that our clips does not belong to a GES.Group otherwise if we change the start of some clip that is in the group the whole group may be moved and we do not want that. So we ungroup the group. \nNow we have the clips ready to be positioned. In this method we first take as a base the first clip previous_clip in the list and iterate over the resting clips. We calculate the time of end there is no method get_end but it can be calculated by the addition of the start and duration of the clip Then we tell the next clip that should start when the previous cli ends. And that s it then our base is the next clips and we repeat this process for all the resting clips in the list. \n"});