fragment_downloaded_cb({"url": "Testing.html#page-description", "fragment": "We have tree sets of tests \nSince version our backend test suite is much smaller and simpler since most of the core functionality is now handled by GES you need to run GES s test suite instead if you want to test more thoroughly. \nYou can run the unit tests with \nninja C mesonbuild test \nIf you want to run only one particular unit test use \ngst validate launcher tests ptv_testsuite.py t tests.test_project.TestProjectManager.testLoadProjectFailedUnknownFormat \nListing tests \ngst validate launcher tests ptv_testsuite.py L \nAs mock library we use Mock as it s now integrated into Python3 which we use as of \nIf you re curious about our unit tests the best way to get to know them is to write a few Pitivi unit tests and have us review them. Check out how to set up your dev env and come in our IRC channel \nThe integration tests are run with GstValidate. They are located in the tests validate tests directory. Each scenario file in the scenarios subdirectory contains a sequence of actions which represent a test. \nWhen a test is run the actions in the scenario are performed by handlers in pitivi utils validate.py or by handlers in GES. The handlers generally act on the widgets and check the expected effect has been obtained on the GES objects. Besides the checks integrated in the handlers for now it is not possible to have additional checks. \nA scenario file is created automatically each time Pitivi is used. \nYou can run the integration tests with \ntests validate tests runtests \nSee also \n"});