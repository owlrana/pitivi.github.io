fragment_downloaded_cb({"url":"attic/Project_loading_and_saving.html#page-description","fragment":"File load/save support in PiTiVi is seemingly simple; however, it has do\nbe done properly, or user experience will suffer. That is the motivation\nfor this rather lengthy design document.\nThe following document is partially based on a patch supplied by Richard\nBoulton, including comments and documentation strings. As the patch no\nlonger cleanly applies, I have been asked to re-work it into a design\ndocument so that we can determine how best to incorporate his ideas.\nThere are 4 states and 4 commands, giving the user a total of 14\npossible scenarios that users might encounter (the initial state does\nnot allow for two of the commands).\n“Save As” will be treated as a special case of “Save” for the purposes\nof this document. When the “Save As” command is issued, the user will be\nasked to supply a file path, and the project will be saved. From then\non, pitivi will be editing the file pointed to by the new file path,\nrather than the previous one. In all other respects, “Save As” is\nidentical to “Save”. When a “Save” command is given on a new project,\nthe scenario will be identical to the “Save As” scenario.\nBefore saving, PiTiVi checks to see if the file has been modified since\nthe last save. When a file has changed on disk, the user will be\nprompted to ask if it is acceptable to overwrite the file. PiTiVi will\nnot check to see if the file has been altered except in these\ncircumstances.\nPiTiVi only edits a single project at a time. Consequently, implicit in\nthe New, Save, and Save As commands is the “Close Project” command.\nSince PiTiVi's UI must always display a project, a “Close Project”\ncommand would be identical to the “New Project” command. Based on this,\nit makes sense to omit “Close Project” from the UI. Nevertheless, it\nshould still be considered a command that is part of this module, for\nthe sake of code reuse.\nPiTiVi should follow the established convention for large applications\nof keeping unsaved changes in a temporary file to minimize the potential\namount of work lost due to crashes, power failures, accidental quits,\netc. After a user-specifiable interval, unsaved changes will be saved to\na temporary file. In addition to this, PiTiVi should not directly\noverwrite a file when saving, but instead back up the original file\nfirst.\nThe high level application logic is relatively straight forward. The\ncoding will not be, due to the nature of the GObject/Gtk. The logic is\ndivided into four operations. these are “New”, “Load”, “Save”, and\n“Close”. The “Close” process is not directly operation by the user, but\nis performed any time the current project is to be replaced.\nImage:New flowchart.png|Logic for creating a new project Image:Load\nflowchart.png|Logic for loading an existing project Image:Save\nflowchart.png|Logic for saving a project (both “Save” and “Save As”)\nImage:Close flowchart.png|Logic for closing a project\nAt the lower level, the application logic will be implemented through\nsignals, and callbacks.\nThe core classes will provide public methods for initiating the\noperations of saving, loading, and creating new projects. If the core\nneeds user input, it will emit the appropriate signal, passing a\nreference to a callback. If the UI determines that further action is\nnecessary by the system, the UI then returns control to the system by\ncalling the callback. This means that system code could be split into\ntwo functions, the public interface which initiates the action, and the\ndeferred callback which finalizes the action.\nWhile PiTiVi should make every effort to support a wide range of file\nformats, most of these will be through external plugins. PiTiVi provides\na reference implementation that uses Python's cPickle module to\nserialize and deserialize data in the intermediate format.\nOne goal of PiTiVis is to work work with a wide variety of project file\nformats.\nThe ProjectSaver class coordinates the work of saving, loading, and\nvalidating project data. The class works with an intermediate format\nwhich concisely represents the project. Everything contained within a\nproject (sources, transitions, effects, compositions, settings, etc)\nmust implement the Serializable interface, which includes the\ntoDataFormat() and fromDataFormat() methods. These methods convert\nto and from this intermediate format.\nMultiple file formats can be supported by sub-classing ProjectSaver\nThese classes must provide dump() and load() methods for the file\nformat they implement. Users of the ProjecSaver's public interface can\nuse the methods saveToFile(), openFrom File, listFormats(), and\nnewProjectSaver. These methods are summarized in the following table:\nThe following example assumes the following:\nOf these sources, only 4 have been added to the timeline (time-stamps\ngiven in h:mm:ss.sss):\nIn this example, media-duration and timeline duration correspond. This\nis not necessarily the case, however.\nThe equivalent python data structure will look like this (currently\nincomplete):\nMore specifically, the project is composed python dictionaries, tuples,\nand strings. It could be thought of as a “tree” but it is really more of\na “deep dictionary,” with several levels of nesting. Each dictionary\ncontains a key called “datatype” which identifies what the kind of\nobject it is. Optional keys are not required to exist, but you must\nhandle them if they do.\nThe project is the root of the “tree.” It is a dictionary, with three\nkeys:\nThe composition field represents a PiTiVi timeline composition element.\nThere is one main timeline per project, but sub-compositions can be\nrepresented as well. A sub composition is represented as a source\ndictionary whose ID field refers to a composition dictionary as defined\nhere. This allows multiple instances of the same composition in the\ntimeline, as well as allowing only part of the composition to be used.\nThis represents a source object in a timeline. It is a dictionary\ncontaining the following keys:\nThere is also the FileSource, which has the same properties as above,\nbut also the following:\nRepresents a list of source factories in a project. Source factories are\nobjects which can create timeline sources. The source-list is a\ndictionary containing:\nRepresents a source factory in the project sources list. It is a\ndictionary containing the following keys:\nProject-specific settings are as follows. This section is incomplete\nA number of features are planned for future releases of PiTiVi. Handling\nthese is currently considered optional, and these specifications are\nsubject to change.\nTransitions and effects have not yet been implemented in PiTiVi. This\nThis represents a transition object in a timeline. It is a dictionary\ncontaining the following keys:\nTODO: explain how to implement a file format as a plugin\nSupport for a variety of formats will be provided by plugins which\nimplement the ProjectSaver interface. A reference implementation\nexists in projectsaver.py, called PickleFormat.\nWhen implementing a custom file format, you should subclass\nProjectSaver. Your child class should define:\n\nThere are 5 media sources located in the same directory as the\nproject\n\nThree video files video1.ogm, video2.ogm, and video4.ogm\n\nTwo audio files audio1.ogg, and audio2.ogg\n\n\n\nThe project output format is 320x240 resolution, 15fps video and\n\n\nThree video files video1.ogm, video2.ogm, and video4.ogm\n\nTwo audio files audio1.ogg, and audio2.ogg\n\n\n\nvideo1.ogm:\n\nmedia-start: 0:00:02:0.000\nmedia-duration: 0:00:37.000\nstart: 0:00:00.000\nduration: 0:00:37.000\n\n\nvideo2.ogm:\n\nmedia-start: 0:00:00:0.000\nmedia-duration: 0:00:30.242\nstart: 0:00:00.37.000\nduration: 0:00:30.242\n\n\nvideo1.ogm:\n\nstart: 0:01:7.242\nduration: 0:00:20.0\nmedia-start: 00:30:00.000\nmedia-duration: 00:00:20.0\n\n\naudio1.ogm\n\nmedia-start: 00:00:00.000\nmedia-duration: 00:01:27.242\nstart: 00:00:00.000\nduration: 00:01:27.242\n\n\naudio2.ogm:\n\nmedia-start: 0:00:00:00.000\nmedia-duration: 0:00:05.200\nstart: 0:00:45.127\nduration: 0:00:5.2\n\n\n\n\nmedia-start: 0:00:02:0.000\nmedia-duration: 0:00:37.000\nstart: 0:00:00.000\nduration: 0:00:37.000\n\n\nmedia-start: 0:00:00:0.000\nmedia-duration: 0:00:30.242\nstart: 0:00:00.37.000\nduration: 0:00:30.242\n\n\nstart: 0:01:7.242\nduration: 0:00:20.0\nmedia-start: 00:30:00.000\nmedia-duration: 00:00:20.0\n\n\nmedia-start: 00:00:00.000\nmedia-duration: 00:01:27.242\nstart: 00:00:00.000\nduration: 00:01:27.242\n\n\nmedia-start: 0:00:00:00.000\nmedia-duration: 0:00:05.200\nstart: 0:00:45.127\nduration: 0:00:5.2\n\n\n\ndatatype -- “project”\n\ntimeline -- maps to a tuple of “Composition” dictionaries (see\nbelow)\n\nsources -- maps to a “source-list”\n\nsettings --maps to a dictionary of project-specific settings (the\nExportSettings field of a Project object)\n\n\n\ndatatype -- “timeline-composition”\n\nsources -- maps to a tuple containing source dictionaries. (see\nbelow)\n\neffects (optional) -- maps to a tuple of effects dictionaries (see\nbleow)\n\ntransitions (optional) -- maps a tuple of transitions dictionaries\n(see below)\n\n\n\ndatatype -- “timeline-source”, “timeline-live-source”,\n“timeline-blank-source”\n\nid -- maps to a reference to a source in this project's sources\nlist or to a composition\n\nstart -- maps to an integer in gnonlin time format (milliseconds).\nthe start of the source in the timeline.\n\nduration -- maps to an integer in gnonlin time format. how long\nthe source lasts in the timeline.\n\n\n\ndatatype -- “timeline-file-source”\n\nmedia-start -- where the source starts in the media, in gnonlin\ntime units\n\nmedia-duration -- how long the source plays the media, in gnonlin\ntime units\n\nvolume (optional) -- a real number, 0 being mute, 1 being original\nsource volume, and > 1 being some multiple of source volume.\n\n\n\ndatatype -- “source-list”\n\nsource-factories -- maps to a list containing “source-factory”\ndictionaries.\n\n\n\ndatatype -- “file-source-factory”, “operation-factory”,\n“simple-operation-factory”, “transition-factory”, “SMPTE-factory”\n\nuid -- an id mapping to the object's unique id\n\n\n\ndatatype -- “export-settings”\nvideowidth\nvideoheight\nvideorate\naudiochans\naudiorate\naudiodepth\nvencoder\naencoder\ncontainersettings\nacodecsettings\nvcodecsettings\n\n\n\ntype -- maps to a string naming the transition to apply. valid\nnames have not yet been established.\n\nstart -- the start of the transition in the timeline, (see\nSource(Timeline) above)\n\nduration -- maps to the duration of the transition in the timeline\n(see Source(Timeline above)\n\nparameters -- maps to the parameters of the transition, which are\nspecific to each transition. specifications for these have yet to be\nestablished.\n\n\n\ntype -- maps to a string naming the effect to apply. valid names\nhave not yet been established\n\nstart -- maps to the start of the effect in the timeline (see\nSource(Timeline above)\n\nduration -- maps to the duration of the effect in the timeline\n(see Source(Timeline) above)\n\nparameters -- maps to the parameters of the effect, which are\nspecific to each effect. specifications for these have yet to be\nestablished.\n\n\nthe doc string for the class. It should contain a brief,\nhuman-readable description of the file format your class implements\n\n__file_format__ -- a string used by pitivi to represent your\nformat\n\n__extensions__ -- a list of valid file extensions for the module.\n\ndump(tree, output_stream) -- a method which converts the\nintermediate representation tree into your file format, and writes\nit to the open file object output_stream\n\nload(input_stream) -- a method which reads from the open file\nobject input_stream and returns an object in the intermediate\nrepresentation\n\n\n\n\nMethod Name\n\n\nparameters\n\n\npurpose\n\n\n\n\n`saveToFile`\n\n\n`tree, output_stream`\n\n\nwrite project data to file\n\n\n\n\n`openFromFile`\n\n\n`tree, output_stream`\n\n\nread project data from file\n\n\n\n\n`@classmethod newProjectSaver`\n\n\n`fmt` - string representing the project file format\n\n\nreturn a new projectSaver instance\n\n\n\n\n`@classmethod listFormats`\n\n\n\n\nreturn a list of strings representing project file formats\n\n\n\n"});