fragment_downloaded_cb({"url": "attic/Dependencies.html#page-description", "fragment": "This page is intended for contributors wishing to work with the development version. Otherwise take a look at the download page on the main website. \nTo build Pitivi you will need the latest devel packages for gstreamer pygst and all related packages. Generally speaking you will need \nOptional but very much recommended \nSpecifically if you want to know the exact versions of our current dependencies have a look at the bottom of check.py specifically the HARD_DEPENDENCIES and SOFT_DEPENDENCIES variables. \nYou can use the following commands to do that in one go \nFor starters copy paste this paragraph into a terminal to get the basic Pitivi dependencies as well as various build dependencies for GStreamer \nsudo dnf install gcc gcc c yasm devel python3 devel bison flex intltool itstool libtool libxml2 devel meson ninja build gnome common gnome desktop3 devel gnome doc utils gtk3 devel gtk doc yelp tools gstreamer1 devel mesa libGL devel mesa libGLU devel python3 cairo devel cairo gobject devel pygobject3 devel gdk pixbuf2 devel python3 matplotlib python3 matplotlib gtk3 python3 numpy python3 canberra ninja build redhat rpm config \nAnd then if you need to build GStreamer quite likely pitivi check.py or the environment script will tell you which version is required you need to ensure that you have all the required dependencies to build the various GStreamer plugins. See the next section below. \nThe yum builddep utility installs the RPMS needed to build a specific package by looking at that package s source RPM in your yum repositories. It only works for one package at a time this python script invokes it for each of the relevant packages. Some of the packages are from the rpmfusion repository so make sure you have that repository enabled before running the script. Copy and paste the following script into a py file make it executable and run it as root \nusr bin env python import sys os pwd \nprint Will get the build deps from gstreamer1 packages duck gstreamer1 gstreamer1 plugins base gstreamer1 plugins good gstreamer1 plugins bad gstreamer1 plugins bad nonfree gstreamer1 plugins ugly python gstreamer1 gstreamer1 libav pitivi \nuser pwd.getpwuid os.getuid if user root for wat in duck os.system dnf builddep y s wat else print You must be root to run this script. sys.exit \nAlso to be able to build gst transcoder you will need to do this hack on Fedora after installing ninja build \nsudo ln s usr bin ninja build usr bin ninja \nYou can simply paste the following which should hopefully solve your dependencies. This was reportedly working on Ubuntu but package names change all the time so if something is missing or you have a better way to solve the deps please tell us about it. \nBasic build tools sudo apt get install git build essential automake libtool itstool gtk doc tools yelp tools gnome common gnome doc utils yasm flex bison \nStuff related to introspection GTK canvases and various other dependencies sudo apt get install libgirepository1.0 dev python3 dev python3 gi python gi dev python3 cairo dev libcairo2 dev python3 gi cairo python3 matplotlib python3 numpy libgdk pixbuf2.0 dev libpulse dev libgtk dev libxml2 dev \nGStreamer x if you re lucky and your distro packages are recent enough sudo apt get install gstreamer1.0 plugins base gstreamer1.0 plugins good gstreamer1.0 plugins bad gstreamer1.0 alsa gstreamer1.0 pulseaudio libgstreamer plugins bad1.0 dev libgstreamer plugins base1.0 dev libgstreamer1.0 dev libgstreamer1.0 \nGStreamer plugins full set of dependencies to build all the codecs sudo apt get build dep gstreamer1.0 plugins base gstreamer1.0 plugins good gstreamer1.0 plugins bad gstreamer1.0 plugins ugly sudo apt get install libglu1 mesa dev \nIf you are using python virtual environments to do your development you aren t going to be able to use the python library packages listed above for your install and the packages are not available via install tools. Install everything else listed above keep python dev and then install the following packages. \nreplace ENV with the path to your virtual env e.g. home aleks src python def \nWARNING the versions used here may change but the general build process should still hold. If you get errors about version mismatches just grab the appropriate ones and start over. \nDownload py2cairo from the appropriate place extract it then \nconfigure prefix ENV make make install \nI don t recall any special overrides but depending on your distro you may need to do something like this if configure complains that it can t find cairo.h \nCFLAGS I usr include cairo configure prefix ENV make make install \nDownload pygobject from the appropriate place extract it cd into it then \nPYCAIRO_LIBS ENV include pycairo PYCAIRO_CFLAGS I ENV pycairo CFLAGS I usr include cairo configure prefix ENV make make install \ngrab gst python from git cd to it autogen.sh This is going to FAIL. after that do this \nPYGOBJECT_LIBS ENV include pygobject PYGOBJECT_CFLAGS I ENV include pygobject configure prefix ENV make make install \n"});