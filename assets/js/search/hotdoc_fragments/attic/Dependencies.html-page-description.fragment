fragment_downloaded_cb({"url": "attic/Dependencies.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Dependencies.md\">\n<h1 id=\"dependencies\">Dependencies</h1>\n<p>This page is intended for contributors wishing to work with the\n<strong>development version</strong>. Otherwise, take a look at <a href=\"http://www.pitivi.org/?go=download\">the download\npage</a> on the main website.</p>\n<p>To build Pitivi, you will need the latest devel packages for gstreamer,\npygst, and all related packages. Generally speaking, you will need:</p>\n<ul>\n<li>The latest GStreamer 1.x and plugins including headers (if your\ndistro doesn't provide it). Since we often fix issues upstream in\nGStreamer, even the latest stable GStreamer 1.x releases might not\nbe enough, we sometimes depend on GStreamer from git. Follow the\n<a href=\"../HACKING.html\">HACKING</a> instruction to setup everything.</li>\n<li>GObject introspection including header files (if your distro doesn't\nprovide it)</li>\n<li>automake</li>\n<li>libtool</li>\n<li>intltool and itstool</li>\n<li>Python 3 including header files</li>\n<li>PyGObject including header files</li>\n<li>GTK 3 including header files</li>\n<li>development headers for OpenGL/OpenGLU through Mesa (used for\nglimagesink if you're building GStreamer)</li>\n<li>gtk-doc-tools, yelp-tools, gnome-doc-utils</li>\n<li>gdk-pixbuf2</li>\n<li>gnome-common</li>\n<li>matplotlib</li>\n<li>numpy</li>\n<li>PulseAudio and ALSA header files</li>\n</ul>\n<p>Optional but very much recommended:</p>\n<ul>\n<li>gnome-desktop3 (for thumbnails in the media library)</li>\n<li>libnotify's python bindings</li>\n<li>libcanberra's python bindings (pycanberra)</li>\n</ul>\n<p>Specifically, if you want to know the <strong>exact versions of our current\ndependencies</strong>, have a look at the bottom of\n<a href=\"http://git.gnome.org/browse/pitivi/tree/pitivi/check.py\">check.py</a>,\nspecifically the \u201cHARD_DEPENDENCIES\u201d and \u201cSOFT_DEPENDENCIES\u201d\nvariables.</p>\n<p>You can use the following commands to do that in one go:</p>\n<h2 id=\"on-fedora\">On Fedora</h2>\n<p>For starters, copy-paste this paragraph into a terminal to get the basic\nPitivi dependencies, as well as various build dependencies for\nGStreamer:</p>\n<p><code>sudo\u00a0dnf\u00a0install\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0gcc\u00a0gcc-c++\u00a0yasm-devel\u00a0python3-devel\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0bison\u00a0flex\u00a0intltool\u00a0itstool\u00a0libtool\u00a0libxml2-devel\u00a0meson\u00a0ninja-build\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0gnome-common\u00a0gnome-desktop3-devel\u00a0gnome-doc-utils\u00a0gtk3-devel\u00a0gtk-doc\u00a0yelp-tools\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0gstreamer1*-devel\u00a0mesa-libGL-devel\u00a0mesa-libGLU-devel\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0python3-cairo-devel\u00a0cairo-gobject-devel\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0pygobject3-devel\u00a0gdk-pixbuf2-devel\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0python3-matplotlib\u00a0python3-matplotlib-gtk3\u00a0python3-numpy\u00a0python3-canberra\u00a0ninja-build\u00a0\\</code><br>\n<code>\u00a0\u00a0\u00a0redhat-rpm-config</code></p>\n<p>And then, if you need to build GStreamer (quite likely;\n<a href=\"http://git.gnome.org/browse/pitivi/tree/pitivi/check.py\">pitivi/check.py</a>\nor the environment script will tell you which version is required), you\nneed to ensure that you have all the required dependencies to build the\nvarious GStreamer plugins. See the next section below.</p>\n<h3 id=\"gstreamers-dependencies\">GStreamer's dependencies</h3>\n<p>The yum-builddep utility installs the RPMS needed to build a specific\npackage by looking at that package's source RPM in your yum\nrepositories. It only works for one package at a time; this python\nscript invokes it for each of the relevant packages. Some of the\npackages are from the <a href=\"http://rpmfusion.org\">rpmfusion</a> repository so\nmake sure you have that repository enabled before running the script.\nCopy and paste the following script into a .py file, make it executable\nand run it as root:</p>\n<p><code>#!/usr/bin/env\u00a0python</code><br>\n<code>import\u00a0sys,\u00a0os,\u00a0pwd</code></p>\n<p><code>print(</code>\u201c<code>Will`` ``get`` ``the`` ``build`` ``deps`` ``from`` ``gstreamer1`` ``packages</code>\u201d<code>)</code><br>\n<code>duck\u00a0=\u00a0[</code>\u201c<code>gstreamer1</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-plugins-base</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-plugins-good</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-plugins-bad</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-plugins-bad-nonfree</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-plugins-ugly</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>python-gstreamer1</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>gstreamer1-libav</code>\u201d<code>,</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0</code>\u201c<code>pitivi</code>\u201d<code>]</code></p>\n<p><code>user\u00a0=\u00a0pwd.getpwuid(os.getuid())[0]</code><br>\n<code>if\u00a0user\u00a0==</code>\u201c<code>root</code>\u201d<code>:</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0for\u00a0wat\u00a0in\u00a0duck:</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0os.system(</code>\u201c<code>dnf`` ``builddep`` ``-y`` ``%s</code>\u201d<code>\u00a0%\u00a0wat)</code><br>\n<code>else:</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0print(</code>\u201c<code>You`` ``must`` ``be`` ``root`` ``to`` ``run`` ``this`` ``script.</code>\u201d<code>)</code><br>\n<code>\u00a0\u00a0\u00a0\u00a0sys.exit(1)</code></p>\n<p>Also, to be able to build gst-transcoder, you will need to do this hack\non Fedora after installing \u201cninja-build\u201d:</p>\n<p><code>sudo\u00a0ln\u00a0-s\u00a0/usr/bin/ninja-build\u00a0/usr/bin/ninja</code></p>\n<h2 id=\"on-ubuntudebian\">On Ubuntu/Debian</h2>\n<p>You can simply paste the following, which should (hopefully) solve your\ndependencies. This was reportedly working on Ubuntu 12.10 but package\nnames change all the time, so if something is missing (or you have a\nbetter way to solve the deps), please tell us about it.</p>\n<p><code>#\u00a0Basic\u00a0build\u00a0tools:</code><br>\n<code>sudo\u00a0apt-get\u00a0install\u00a0git\u00a0build-essential\u00a0automake\u00a0libtool\u00a0itstool\u00a0gtk-doc-tools\u00a0yelp-tools\u00a0gnome-common\u00a0gnome-doc-utils\u00a0yasm\u00a0flex\u00a0bison</code></p>\n<p><code>#\u00a0Stuff\u00a0related\u00a0to\u00a0introspection,\u00a0GTK,\u00a0canvases,\u00a0and\u00a0various\u00a0other\u00a0dependencies:</code><br>\n<code>sudo\u00a0apt-get\u00a0install\u00a0libgirepository1.0-dev\u00a0python3-dev\u00a0python3-gi\u00a0python-gi-dev\u00a0\\</code><br>\n<code>python3-cairo-dev\u00a0libcairo2-dev\u00a0python3-gi-cairo\u00a0python3-matplotlib\u00a0python3-numpy\u00a0\\</code><br>\n<code>libgdk-pixbuf2.0-dev\u00a0libpulse-dev\u00a0libgtk-3-dev\u00a0\\</code><br>\n<code>libxml2-dev\u00a0\\</code></p>\n<p><code>#\u00a0GStreamer\u00a01.x,\u00a0if\u00a0you're\u00a0lucky\u00a0and\u00a0your\u00a0distro\u00a0packages\u00a0are\u00a0recent\u00a0enough:</code><br>\n<code>sudo\u00a0apt-get\u00a0install\u00a0gstreamer1.0-plugins-base\u00a0gstreamer1.0-plugins-good\u00a0gstreamer1.0-plugins-bad\u00a0gstreamer1.0-alsa\u00a0gstreamer1.0-pulseaudio\u00a0\\</code><br>\n<code>libgstreamer-plugins-bad1.0-dev\u00a0libgstreamer-plugins-base1.0-dev\u00a0libgstreamer1.0-dev\u00a0libgstreamer1.0-0</code></p>\n<p><code>#\u00a0GStreamer\u00a0plugins'\u00a0full\u00a0set\u00a0of\u00a0dependencies\u00a0to\u00a0build\u00a0all\u00a0the\u00a0codecs:</code><br>\n<code>sudo\u00a0apt-get\u00a0build-dep\u00a0gstreamer1.0-plugins-base\u00a0gstreamer1.0-plugins-good\u00a0gstreamer1.0-plugins-bad\u00a0gstreamer1.0-plugins-ugly</code><br>\n<code>sudo\u00a0apt-get\u00a0install\u00a0libglu1-mesa-dev</code></p>\n<h2 id=\"in-a-virtual-env\">In a Virtual Env</h2>\n<p>If you are using python virtual environments to do your development, you\naren't going to be able to use the python library packages listed above\nfor your install, and the packages are not available via install tools.\nInstall everything *else* listed above (keep python-dev)and then\ninstall the following packages.</p>\n<p>replace (ENV) with the path to your virtual env (e.g.\n/home/aleks/src/python-def/ )</p>\n<p>WARNING: the versions used here may change, but the general build\nprocess should still hold. If you get errors about version mismatches,\njust grab the appropriate ones and start over.</p>\n<h3 id=\"pycairo\">PyCairo</h3>\n<p>Download py2cairo-1.10.0 from the appropriate place, extract it, then:</p>\n<p><code>./configure\u00a0--prefix=(ENV)</code><br>\n<code>make\u00a0&amp;&amp;\u00a0make\u00a0install</code></p>\n<p>I don't recall any special overrides, but depending on your distro, you\nmay need to do something like this if configure complains that it can't\nfind cairo.h:</p>\n<p><code>CFLAGS=-I/usr/include/cairo/\u00a0./configure\u00a0--prefix=(ENV)</code><br>\n<code>make\u00a0&amp;&amp;\u00a0make\u00a0install</code></p>\n<h3 id=\"pygobject\">PyGObject</h3>\n<p>Download pygobject-3.0.0 from the appropriate place, extract it, cd into\nit, then:</p>\n<p><code>PYCAIRO_LIBS=(ENV)/include/pycairo/\u00a0PYCAIRO_CFLAGS=-I(ENV)/pycairo/\u00a0CFLAGS=-I/usr/include/cairo/\u00a0./configure\u00a0--prefix=(ENV)</code><br>\n<code>make\u00a0&amp;&amp;\u00a0make\u00a0install</code></p>\n<h3 id=\"pygst\">PyGST</h3>\n<p>grab gst-python from git, cd to it, ./autogen.sh This is going to FAIL.\nafter that, do this:</p>\n<p><code>PYGOBJECT_LIBS=(ENV)/include/pygobject-3.0/\u00a0PYGOBJECT_CFLAGS=-I(ENV)/include/pygobject-3.0/\u00a0./configure\u00a0--prefix=(ENV)</code><br>\n<code>make\u00a0&amp;&amp;\u00a0make\u00a0install</code></p>\n\n</div>\n\n\n\t"});