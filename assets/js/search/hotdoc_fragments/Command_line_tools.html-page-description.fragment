fragment_downloaded_cb({"url": "Command_line_tools.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Command_line_tools.md\">\n<h1 id=\"command-line-tools\">Command line tools</h1>\n<p>This is a list of tools to use for developing Pitivi.</p>\n<h1 id=\"commands\">Commands</h1>\n<h2 id=\"geslaunch\">ges-launch</h2>\n<p>Used to play back xges files and render them.</p>\n<p><code>#\u00a0Render\u00a0project.xges\u00a0to\u00a0video.ogv.</code><br>\n<code>$\u00a0ges-launch-1.0\u00a0-l\u00a0project.xges\u00a0-o\u00a0video.ogv</code></p>\n<h2 id=\"gstlaunch\">gst-launch</h2>\n<p>Launches GStreamer pipelines.</p>\n<p><code>#\u00a0Play\u00a0a\u00a0video\u00a0with\u00a0the\u00a0decodebin</code><br>\n<code>$\u00a0gst-launch-1.0\u00a0filesrc\u00a0location=foo.ogv\u00a0!\u00a0decodebin\u00a0!\u00a0autovideosink</code></p>\n<h2 id=\"gstinspect\">gst-inspect</h2>\n<p>Lists installed GStreamer plugins.</p>\n<p><code>#\u00a0Find\u00a0all\u00a0plugins\u00a0containing\u00a0</code>\u201c<code>2000</code>\u201d<br>\n<code>$\u00a0gst-inspect-1.0\u00a0|\u00a0grep\u00a02000</code></p>\n<p><code>#\u00a0List\u00a0details\u00a0of\u00a0matroskamux</code><br>\n<code>$\u00a0gst-inspect-1.0\u00a0matroskamux</code></p>\n<h2 id=\"gstdiscoverer\">gst-discoverer</h2>\n<p>Prints information of a media file.</p>\n<p><code>#\u00a0Print\u00a0info\u00a0of\u00a0foo.mp3</code><br>\n<code>$\u00a0gst-discoverer-1.0\u00a0foo.mp3</code></p>\n<h2 id=\"gstvalidatelauncher\">gst-validate-launcher</h2>\n<p>Launches gst validate test suites.</p>\n<p><code>#\u00a0-t\u00a0enables\u00a0blacklisted\u00a0tests</code><br>\n<code>$\u00a0gst-validate-launcher\u00a0-t\u00a0ges.playback.*</code></p>\n<h1 id=\"building\">Building</h1>\n<h2 id=\"cerbero\">cerbero</h2>\n<p>The GStreamer build system. Used to compile the Pitivi bundle builds or\nthe GStreamer SDK.</p>\n<p><code>#\u00a0Build\u00a0Pitivi\u00a0with\u00a0dependencies</code><br>\n<code>$\u00a0cerbero\u00a0build\u00a0pitivi</code></p>\n<h2 id=\"pitivi-build-environment\">Pitivi build environment</h2>\n<p>Builds Pitivi in an own environment</p>\n<p><code>#\u00a0Open\u00a0shell\u00a0in\u00a0Pitivi\u00a0environment</code><br>\n<code>$\u00a0./bin/pitivi-git-environment.sh</code></p>\n<p><code>#\u00a0Update\u00a0git\u00a0repos\u00a0and\u00a0build\u00a0everything</code><br>\n<code>$\u00a0./bin/pitivi-git-environment.sh\u00a0--build</code></p>\n<p>To build less packages the script checks if a sufficient GStreamer\nrelease is installed in your system. To build a git master version in\nthis case, you need to set this value to a higher version:</p>\n<p>in bin/pitivi-git-evironment.sh:</p>\n<p><code>DEFAULT_GST_VERSION=</code>\u201c<code>1.6</code>\u201d</p>\n<h1 id=\"debugging\">Debugging</h1>\n<h2 id=\"gst_debug\">GST_DEBUG</h2>\n<p>If you want debug information to be printed in general, you have to use\nthe GST_DEBUG envoirement variable. Execute commands like so:</p>\n<p><code>$\u00a0GST_DEBUG=3\u00a0gst-launch-1.0\u00a0videotestsrc\u00a0!\u00a0autovideosink</code></p>\n<p>You can also filter the debug categories</p>\n<p><code>$\u00a0GST_DEBUG=audiotestsrc:5\u00a0gst-launch-1.0\u00a0videotestsrc\u00a0!\u00a0autovideosink</code></p>\n<h2 id=\"pipeline-graph\">Pipeline graph</h2>\n<p>You need graphviz installed for this.</p>\n<p><code>$\u00a0GST_DEBUG_DUMP_DOT_DIR=/tmp/\u00a0gst-launch-1.0\u00a0videotestsrc\u00a0!\u00a0autovideosink</code></p>\n<p>Now you can convert the dot files to png:</p>\n<p><code>$\u00a0dot\u00a0-Tpng\u00a0file.dot\u00a0-o\u00a0file.png</code></p>\n<h2 id=\"gdb\">gdb</h2>\n<p>The GNU debugger. A C debugger.</p>\n<p>To debug a segfault, you need following syntax to run gdb:</p>\n<p><code>$\u00a0gdb\u00a0--args\u00a0python\u00a0./bin/pitivi</code></p>\n<p><code>$\u00a0gdb\u00a0--args\u00a0sh\u00a0ges-launch-1.0\u00a0-l\u00a0project.xges</code></p>\n\n</div>\n\n\n\t"});