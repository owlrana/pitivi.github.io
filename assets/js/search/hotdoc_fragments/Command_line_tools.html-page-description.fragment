fragment_downloaded_cb({"url": "Command_line_tools.html#page-description", "fragment": "This is a list of tools to use for developing Pitivi. \nUsed to play back xges files and render them. \nRender project.xges to video.ogv. ges launch l project.xges o video.ogv \nLaunches GStreamer pipelines. \nPlay a video with the decodebin gst launch filesrc location foo.ogv decodebin autovideosink \nLists installed GStreamer plugins. \nFind all plugins containing gst inspect grep \nList details of matroskamux gst inspect matroskamux \nPrints information of a media file. \nPrint info of foo.mp3 gst discoverer foo.mp3 \nLaunches gst validate test suites. \nt enables blacklisted tests gst validate launcher t ges.playback. \nThe GStreamer build system. Used to compile the Pitivi bundle builds or the GStreamer SDK. \nBuild Pitivi with dependencies cerbero build pitivi \nBuilds Pitivi in an own environment \nOpen shell in Pitivi environment bin pitivi git environment.sh \nUpdate git repos and build everything bin pitivi git environment.sh build \nTo build less packages the script checks if a sufficient GStreamer release is installed in your system. To build a git master version in this case you need to set this value to a higher version \nin bin pitivi git evironment.sh \nDEFAULT_GST_VERSION \nIf you want debug information to be printed in general you have to use the GST_DEBUG envoirement variable. Execute commands like so \nGST_DEBUG gst launch videotestsrc autovideosink \nYou can also filter the debug categories \nGST_DEBUG audiotestsrc gst launch videotestsrc autovideosink \nYou need graphviz installed for this. \nGST_DEBUG_DUMP_DOT_DIR tmp gst launch videotestsrc autovideosink \nNow you can convert the dot files to png \ndot Tpng file.dot o file.png \nThe GNU debugger. A C debugger. \nTo debug a segfault you need following syntax to run gdb \ngdb args python bin pitivi \ngdb args sh ges launch l project.xges \n"});