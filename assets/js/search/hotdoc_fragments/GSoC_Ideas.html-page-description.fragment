fragment_downloaded_cb({"url":"GSoC_Ideas.html#page-description","fragment":"These ideas shall be used as a base for writing a detailed project proposal if\nyou want to apply for a GSoC internship. You are\nwelcome to come up with your own ideas.\nTo create a detailed proposal, use our GSoC application\ntemplate.\nThe most tedious process of video editing is the initial cutting and structuring\nof the global timeline. A new perspective similar to the\nEditorPerspective\nwill offer a second timeline\nrepresentation above the\ntimeline, that is always zoom-fitted.\nRequirements: Python. Minimal experience contributing to Pitivi including unit\ntests.\nFixing timeline issues and making small enhancements would improve a lot the\ntimeline usability, making it a delight to use Pitivi. See\nGitLab.\nRequirements: Python. Minimal experience contributing to Pitivi including unit\ntests.\nOften people want to pick a nice tune and then sync their weekend clips on it.\nTo make this easy, Pitivi can detect the beats using a 3rd party library, and\nallow aligning and cutting the clips to the beat. It might sound easy, but the\nentire experience should be super-polished so it works nice and everybody can do\nit.\nRequirements: Python, C. Minimal experience contributing to Pitivi including\nunit tests.\nFor end credits and other\nadvanced text display, we could use the new GStreamer\nWPE element in\ngst-plugins-bad,\nwhich can display an HTML page as a video element. As GstWPE is a live source it\ndoes not allow seeking (getting frames at random positions), we have to add\nlogic in Pitivi for seamlessly creating a video file out of an animated HTML\npage. The resulting file can be used in the project timeline as any other video\nclip. You'd have to extend the UI with a new\nperspective\nfor managing the closing credits HTML, and the corresponding video files.\nRequirements: Python. Minimal experience contributing to Pitivi including unit\ntests.\nGStreamer has pretty good GPU support through the OpenGL set of plugins, but\nPitivi/GES is not able to take full advantage of that infrastructure yet, mainly\nbecause of lack of testing and bug fixing on our side. This project is about\nenabling GL plugins for compositing and rendering, and fixing any issue that\nshows up. The second part would be about making sure hardware accelerated\ndecoders can be used in the pipelines.\nRequirements: C. Experience with GStreamer is mandatory. Minimal experience\ncontributing to Pitivi including unit tests. Experience with OpenGL is a plus.\n"});