fragment_downloaded_cb({"url":"GSoC_Ideas.html#page-description","fragment":"These ideas can be used as a base for writing a detailed project proposal if you want to apply for a GSoC internship. You are welcome to come up with your own ideas.\nTo create a detailed proposal, use GNOME's GSoC application template.\n\nBrief explanation: The render dialog should be simplified to avoid overwhelming the users, while still allowing full control. The dialog with the advanced settings of the encoders should similarly be improved for the officially supported encoders. In preparation, the render dialog should be refactored into a perspective.\nRequirements: Python, eye for detail. Minimal experience contributing to Pitivi.\nMentor: Alexandru \"aleb\" Băluț\n\n\nBrief explanation: Often people want to pick a nice tune and then sync their weekend clips on it. To make this easy, Pitivi can detect the beats using a 3rd party library, and allow aligning and cutting the clips to the beat. It might sound easy, but the entire experience should be super-polished so everybody can do it.\nRequirements: Python, C. Minimal experience contributing to Pitivi.\nMentor: Mathieu Duponchelle\n\n\nBrief explanation: We should make it easy to blur faces. We can use an existing 3rd party plugin to analyze the video and report the location of the faces. The resulting data can be used to blur a specific face. The challenge is making this process as friendly as possible.\nRequirements: Python. Minimal experience contributing to Pitivi.\nMentor: Mathieu Duponchelle\n\n\nBrief explanation: For end credits and other advanced text display, we could use the new GStreamer WPE element in gst-plugins-bad, which can display an HTML page as a video element. The first task would be to create a scroll mechanism by extending the GStreamer navigation event API with a scroll event type, and adding support in GstWPE. As GstWPE is a live source it does not allow seeking (getting frames at random positions), so the second task would be to add logic in Pitivi for creating an HQ proxy file out of the page being scrolled, which can be used in the project timeline as any other video clip. The third part would be a simple UI in Pitivi for easily creating the closing credits HTML, and managing the proxy file.\nRequirements: C, Python. Minimal experience contributing to Pitivi.\nMentor: Philippe Normand\n\n\nBrief explanation: The first task would be to refactor the Media Library, to replace the two separate widgets we use for the list view and the icon view with a single flexible Gtk.FlowBox widget. The second task would be to allow basic tagging of clips in the Media Library, and extend the search functionality to work on tags. The remaining time could be allocated to prepare for advanced clips filtering in the Media Library, based on tags.\nRequirements: Python, eye for detail. Minimal experience contributing to Pitivi.\nMentor: Alexandru \"aleb\" Băluț\n\n\nBrief explanation: The most tedious process of video editing is the initial cutting and structuring of the global timeline. A new perspective similar to the EditorPerspective will offer a second timeline representation above the timeline, that is always zoom-fitted. This could build on the markers functionality to allow for pre-insertion trimming.\nRequirements: Python. Minimal experience contributing to Pitivi.\nMentor: Thibault \"thiblahute\" Saunier\n\n\nBrief explanation: GStreamer has pretty good GPU support through the OpenGL set of plugins, but Pitivi/GES is not able to take full advantage of that infrastructure yet, mainly because of lack of testing and bug fixing on our side. This project is about enabling GL plugins for compositing and rendering, and fixing any issue that shows up. The second part would be about making sure hardware accelerated decoders can be used in the pipelines.\nRequirements: C. Experience with GStreamer is mandatory. Minimal experience contributing to Pitivi. Experience with OpenGL is a plus.\nMentor: Thibault \"thiblahute\" Saunier\n\n"});