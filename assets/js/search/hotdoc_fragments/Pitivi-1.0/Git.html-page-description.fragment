fragment_downloaded_cb({"url": "Pitivi-1.0/Git.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Git.md\">\n<h1 id=\"git\">Git</h1>\n<p><a href=\"http://git-scm.com\">Git</a> is the most popular <a href=\"http://en.wikipedia.org/wiki/Distributed_revision_control\">distributed revision\ncontrol\nsystem</a> used\nby the kernel, X, GStreamer, GNOME, etc... Git allows you to get a\ncheckout (with full history) of the Pitivi code, create your own\nbranches, publish those, etc... without the need for access to the\ncentral repository.</p>\n<p>Indeed, one of the very big strengths of a decentralized (a.k.a.\ndistributed) system is that it is truly open and meritocratic: it allows\nyou to do whatever changes you want to your repository, request\nfeedback/reviews and then request that others pull your changes into the\nmain repository on which others base their work upon. See\n<a href=\"http://youtube.com/watch?v=4XpnKHJAok8#t=18m05s\">http://youtube.com/watch?v=4XpnKHJAok8#t=18m05s</a> for an explanation of\nthis phenomenon.</p>\n<p>This page is not meant to be a general tutorial for Git; for that, see\nthe <a href=\"https://live.gnome.org/Git\">GNOME Git page</a>, the <a href=\"http://git-scm.com/documentation\">official Git\ntutorial/documentation page</a> and <a href=\"http://gitready.com\">git\nready</a>. In this page, we will cover some more\nadvanced usage and the <strong>specifics of how we use Git in the Pitivi\nproject</strong>. This is aimed at people coming from Bazaar or Subversion.</p>\n<h1 id=\"first-steps-checking-out-the-main-repository\">First steps: checking out the main repository</h1>\n<p><code>git\u00a0clone\u00a0</code><a href=\"git://git.gnome.org/pitivi\"><code>git://git.gnome.org/pitivi</code></a><code>\u00a0\u00a0#\u00a0do\u00a0the\u00a0initial\u00a0repository\u00a0checkout</code></p>\n<p>You should now have a directory called pitivi with the latest version of\nthe files checked out. You are in the <strong><code>master</code></strong> branch.</p>\n<p><strong>Note</strong>: unlike in Bazaar or other DVCSes, in git you only do this\nonce; the \u201cremotes\u201d and branches in are all self-contained in the\nrepository. In other words, you only do one checkout and do everything\ninside it using branches and remotes.</p>\n<h1 id=\"dealing-with-remotes-and-branches\">Dealing with remotes and branches</h1>\n<p>You can see all local branches by using the <code>git branch</code> command. The\nbranch you are working in is marked with an asterisk (<strong>*</strong>). You can\nview all branches, including the remote ones, by doing:</p>\n<p><code>git\u00a0branch\u00a0-a</code></p>\n<p>You'll notice that it shows you all the branches available from the\n<a href=\"http://git.gnome.org/pitivi\">http://git.gnome.org/pitivi</a> repository.</p>\n<p>Let's say we add multiple people's remote repositories inside your local\nrepository (see <a href=\"Git_repositories.html\">Git repositories</a> for the\nlist of our known remotes):</p>\n<p><code>git\u00a0remote\u00a0add\u00a0nekohayo\u00a0</code><a href=\"https://github.com/nekohayo/pitivi.git\"><code>https://github.com/nekohayo/pitivi.git</code></a><br>\n<code>git\u00a0remote\u00a0add\u00a0thiblahute\u00a0</code><a href=\"https://github.com/thiblahute/pitivi.git\"><code>https://github.com/thiblahute/pitivi.git</code></a></p>\n<p>To update the remotes:</p>\n<p><code>git\u00a0remote\u00a0update</code></p>\n<p>And now you would be able to do stuff like:</p>\n<p><code>git\u00a0checkout\u00a0thiblahute/somebranch</code></p>\n<p>Or, to create a new local branch based on that branch:</p>\n<p><code>git\u00a0checkout\u00a0-b\u00a0mynewbranch\u00a0thiblahute/somebranch</code></p>\n<p>\u201cgit remote update\u201d does not update your local branches, only the\nremotes. For example, if you have a local branch called \u201ctitles\u201d based\non \u201cnekohayo/titles\u201d (remote branch) and the \u201ctitles\u201d branch on the\n\u201cnekohayo\u201d remote changed, you will have to checkout your local \u201ctitles\u201d\nbranch and update it to reflect the changes (with git pull --rebase, or\na git reset --hard, depending on whether or not you want to keep your\nlocal changes).</p>\n<p>When the remote party has deleted some branches, you're still left with\nlocal copies of those remote branches... eventually you can clean it up\nwith:</p>\n<p><code>git\u00a0remote\u00a0prune\u00a0REMOTE_NAME</code></p>\n<p>I like to think of \u201cgit checkout\u201d like \u201csvn switch\u201d: it allows you to\nmove between branches (among other things). So, to go back to the main\nbranch, you do \u201cgit checkout master\u201d.</p>\n<h2 id=\"creating-a-work-branch\">Creating a work branch</h2>\n<p>It is good practice never to do work on the master branch (more details\nin the next section). Therefore you need to create a work branch :</p>\n<p><code>\u00a0git\u00a0branch\u00a0work\u00a0master</code></p>\n<p>If you use <code>git branch</code> you will now see your new branch... but you are\nstill in <code>master</code>.</p>\n<p>To switch to your <code>work</code> branch you need to check it out using:</p>\n<p><code>\u00a0git\u00a0checkout\u00a0work</code></p>\n<p>And it tells you it has successfully switched to the work branch.</p>\n<p><strong>Tip</strong>: you can branch and checkout in one step using the\n<code>-b</code>&lt;new_branch&gt; option of <code>git checkout</code> Therefore the two steps above\nbecome:</p>\n<p><code>\u00a0git\u00a0checkout\u00a0-b\u00a0work\u00a0master</code></p>\n<h2 id=\"pitivispecific-gotcha-dont-use-git-pull\">Pitivi-specific gotcha: don't use git pull</h2>\n<p>Typically, in Pitivi we use rebase and reset more often than \u201cgit merge\u201d\nwhen merging your changes. This means two things:</p>\n<ul>\n<li>You should not do your work directly on your \u201cmaster\u201d branch. You\nshould do it in separate branches instead, unless you really know\nwhat you're doing and can handle resolving conflicts. We recommend\nthat you keep master (or whatever the main development base is)\nidentical to the upstream (\u201corigin\u201d) remote branch.</li>\n<li>To update your local master branch (or whatever your base is) when\nyou're on the local branch, always use \u201cgit pull --rebase\u201d.</li>\n</ul>\n<p>Really, in the Pitivi context you don't want to use \u201cgit pull\u201d (this\ncreates merge commits and becomes quite messy over time). However, the\ngeneral rules of thumb regarding rebasing are:</p>\n<ul>\n<li>Branches on the official repository (git.gnome.org/pitivi) should\nonly be fast-forward, because that's what contributors may base\nthemselves upon</li>\n<li>Individual contributors might use \u201cgit rebase -i\u201d when they feel it\nnecessary to sync up their work. Otherwise, we will do it at the\ntime of the \u201cmerge\u201d (so to speak). Rebasing is a more advanced\nnotion, so refer to git ready and to this Pitivi-specific video\ntutorial: <a href=\"http://youtube.com/watch?v=6WU4jKti_vo\">http://youtube.com/watch?v=6WU4jKti_vo</a></li>\n</ul>\n<h1 id=\"publishing-your-work-adding-your-own-remote-to-push-to\">Publishing your work / adding your own remote to push to</h1>\n<p>Several free git hosting services exist out there where you can create\nvery quickly some repositories and publish your branch there. These\nwebsites will contain information on how to add your publishing remote\nURL. Here's an example of how you can add your remote git repository\nwhere you'll push your changes, with github (notice that I named the\nremote \u201cgithub\u201d instead of \u201corigin\u201d, since origin is git.gnome.org):</p>\n<p><code>git\u00a0remote\u00a0add\u00a0github\u00a0git@github.com:my_user/pitivi.git</code></p>\n<p>Let's say you created a working branch locally (called <code>mytest</code>) and\nthat you named your remote repository <code>myremote</code>, and you want to\npublish it so people can see what you have done, try it out, etc. The\nfirst time you will have to tell git <strong>where</strong> you want to push that\nbranch:</p>\n<p><code>\u00a0git\u00a0push\u00a0myremote\u00a0mytest</code></p>\n<p>This will automatically:</p>\n<ul>\n<li>Create a <code>mytest</code> branch on your remote repository</li>\n<li>Copy over all the commits</li>\n<li>Make git remember where that branch is stored remotely</li>\n</ul>\n<p>The next time you want to push your work remotely, you just to be within\nthat branch and do:</p>\n<p><code>\u00a0git\u00a0push</code></p>\n<p>To delete a branch (or tag) on the remote repository:</p>\n<p><code>git\u00a0push\u00a0REMOTENAME\u00a0:BRANCHNAME</code></p>\n<p>This command may look strange, but it is literally telling git <em>push,\nonto REMOTENAME, \u201cnothing\u201d into BRANCHNAME</em>.</p>\n<p>Once that's done, others will be able to do a \u201cgit remote prune\u201d to see\nthose changes on their end.</p>\n<h1 id=\"not-going-insane\">Not going insane</h1>\n<p>You are very quickly going to have a lot of branches. There are\ngraphical tools to view what you have locally and make some\nchanges/actions without needing to rely on the command line (unless you\nprefer the command line interface). We recommend\n<a href=\"https://wiki.gnome.org/Apps/Gitg\">gitg</a> (tailored for GNOME, with a\nreally nice interface), though there are others like giggle or gitk.</p>\n<p>Other <em>very</em> useful tools are:</p>\n<ul>\n<li><a href=\"https://github.com/wmanley/git-meld\">Git Meld</a> (not needed anymore,\nsimply put \u201cmeld = difftool --dir-diff -t meld\u201d in the alias section\nof your ~/.gitconfig file)</li>\n<li><a href=\"http://asemanfar.com/Current-Git-Branch-in-Bash-Prompt\">Showing the current branch name at all\ntimes</a></li>\n<li><a href=\"http://gitready.com/advanced/2009/02/05/bash-auto-completion.html\">Git autocompletion for\nBash</a></li>\n</ul>\n<p>Nice Git features to learn about:</p>\n<ul>\n<li>\u201cgit grep\u201d</li>\n<li>\u201cgit bisect\u201d (for pinpointing regressions)</li>\n<li>\u201cgit rebase -i\u201d is an extremely powerful tool once you get used to\nit. See the various tutorials/documentation about it, this\nPitivi-specific video tutorial:\n<a href=\"http://youtube.com/watch?v=6WU4jKti_vo\">http://youtube.com/watch?v=6WU4jKti_vo</a></li>\n<li>\u201cgit add -p\u201d (or use the little \u201c+\u201d icons in\n<a href=\"https://wiki.gnome.org/Apps/Gitg\">gitg</a>'s commit mode) to\nstage/commit only portions of a file (allowing you to easily plan\nand split work across different commits)</li>\n</ul>\n<h2 id=\"tips-and-tricksgotchas-for-bazaarsubversion-users\">Tips and tricks/gotchas for Bazaar/Subversion users</h2>\n<ul>\n<li>To revert some files to the version provided by git, use \u201cgit\ncheckout thefiles\u201d, not \u201cgit revert\u201d.</li>\n<li>\u201cgit checkout\u201d is also used for switching between branches (or to\nany particular commit/point in the history). It is somewhat similar\nto \u201csvn switch\u201d.</li>\n<li>To create a branch, you do \u201cgit checkout -b my_new_local_branch\ntheremote/thesourcebranch\u201d, not \u201cgit branch\u201d.</li>\n<li>To delete a branch, you do \u201cgit branch -D thebranch\u201d.</li>\n<li>To apply a patch without committing, use \u201cgit apply foo.diff\u201d</li>\n<li>To apply a patch and create commits at the same time, use \u201cgit am\nfoo.patch\u201d</li>\n<li>In the Pitivi context, do not ever use \u201cgit pull\u201d (unless you really\nknow what you're doing). Use \u201cgit pull --rebase\u201d, to get the\nequivalent of a \u201csvn up\u201d. If you have changes in the branch you're\n\u201cpulling\u201d, it will rebase them on top of it (but, as mentioned\npreviously, you should not do your work directly on the master\nbranch unless you know what you're doing and know how to resolve\npotential rebase conflicts).</li>\n</ul>\n<p>Git's syntax can arguably be quite arcane. Take a look at the\n~/.gitconfig file: you can add an [alias] section to create command\naliases. This is nekohayo's gitconfig:</p>\n<p><code>[alias]</code><br>\n<code>\u00a0\u00a0\u00a0diffstat\u00a0=\u00a0diff\u00a0--stat</code><br>\n<code>\u00a0\u00a0\u00a0staged\u00a0=\u00a0diff\u00a0--cached</code><br>\n<code>\u00a0\u00a0\u00a0unstaged\u00a0=\u00a0diff</code><br>\n<code>\u00a0\u00a0\u00a0both\u00a0=\u00a0diff\u00a0HEAD</code><br>\n<code>\u00a0\u00a0\u00a0oneline\u00a0=\u00a0log\u00a0--pretty=oneline\u00a0--abbrev-commit</code></p>\n<p><code>\u00a0\u00a0\u00a0newbranch\u00a0=\u00a0checkout\u00a0-b\u00a0#\u00a0destination\u00a0source,\u00a0not\u00a0the\u00a0other\u00a0way\u00a0around</code><br>\n<code>\u00a0\u00a0\u00a0deletebranch\u00a0=\u00a0branch\u00a0-D</code><br>\n<code>\u00a0\u00a0\u00a0switch\u00a0=\u00a0checkout</code><br>\n<code>\u00a0\u00a0\u00a0uncommit\u00a0=\u00a0reset\u00a0HEAD~1</code><br>\n<code>\u00a0\u00a0\u00a0nukefromorbit\u00a0=\u00a0clean\u00a0-fxd\u00a0#\u00a0use\u00a0with\u00a0extreme\u00a0caution.</code><br>\n<code>\u00a0\u00a0\u00a0up\u00a0=\u00a0pull\u00a0--rebase</code><br>\n<code>\u00a0\u00a0\u00a0patch\u00a0=\u00a0am</code></p>\n<p><code>\u00a0\u00a0\u00a0meld\u00a0=\u00a0difftool\u00a0--dir-diff\u00a0-t\u00a0meld</code></p>\n\n</div>\n\n\n\t"});