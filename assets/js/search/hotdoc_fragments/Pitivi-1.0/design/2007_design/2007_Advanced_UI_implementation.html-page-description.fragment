fragment_downloaded_cb({"url": "Pitivi-1.0/design/2007_design/2007_Advanced_UI_implementation.html#page-description", "fragment": "The MVC Observer Design Pattern \nSelectableDraggable Selectable Dragable \nComplexTimelineCanvas goocanvas.Canvas Zoomable \nSelection Manipulation Methods \nComplexTrack SmartGroup Zoomable \nComplexTimelineObject Group Zoomable SelectableDragable \nTimelineFileObject TimelineObject \nMarker goocanvas.Polygon SelectableDragable Magnetic \nPiTiVi relies heavily on MVC and Observer design patterns to decouple the core of the application from the user interface. Core objects emit signals which prompt changes in the UI. UI elements wrap core objects to manipulate data which in turn emit signals. The observer pattern allows the user interface to listen for changes in the core without coupling the core to the UI. \nWe use pygobject to provide support for the observer pattern in the core. The user interface depends on pygtk and pygoocanvas both of which are based on GObject. \nThis is the explicit merging of the Selectable Dragable interfaces. Objects which are both selectable and dragable should implement this interface rather than the two ancestors independently. The reason is that this interface provides support for manipulating selections of movable items i.e. if the user has multiple items selected and moves one of them all the other items should move in unison. \ncurrently called ComplexLayers will be renamed before the next release \nThis class is the timeline. The canvas creates one ComplexTrack item for ComplexTrack item for each top level composition within a timeline. PiTiVi core doesn t yet support multi track editing but this support is planned. ComplexTracks should be able to handle creating destroying tracks dynamically. \nIn addition to the timeline itself this widget keeps track of a number of important details about the timeline current edit points playhead position current tool only razor or pointer at present and the current selection. \nMouse and pointer events received by this widget are routed to the selection or the current active tool. Keyboard events are handled here directly depending on the current active tool. \nCommands which operate on the selection are sent to this widget which iterates over the selection and performs operations on every element contained therein. \nThis class is a container for pitivi tracks. \nThis class encapsulates an internal view of a TimelineComposition object. Each ComplexTrack manages exactly one TimelineComposition and connects to the following signals \nThese signals are all sent to the same pair of signal handlers _objectAdded _objectRemoved respectively. This function takes an additional parameter klass which is a reference to the sublclass of ComplexTimelineObject which should be instantiated. \nCorresponds to pitivi.timeline.objects.TimelineObject. It is a base class for all objects represented in the ComplexTimeline. When created it is given a reference to a TimelineObject and connects to that object s start duration changed signal. When the core object s start and duration change the UI object s horizontal position and width are updated. When the core object s layer position changes the vertical position is updated. \nEvery TimelineObject has a reference to a Content object which is displayed inside of the TimelineObject. This object may be audio or video. The Content object can change height or visibility depending on its state. The parent ComplexTimelineObject must keep track of the height of its content region and adjust its height accordingly. \nComplexTimelineObjects have drag handles which allow them to be directly resized. See the Handle class documentation for more information. \nThis class derives from TimelineObject. It overrides the signal handlers which set the in out edit points so that they also set the media start media duration points. \nSimilar to a handle but can be the selected which implies that it contains a reference to a core object. \n"});